<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iNKORE.UI.WPF.Modern</name>
    </assembly>
    <members>
        <member name="T:iNKORE.UI.WPF.Modern.ColorPaletteResources">
            <summary>
            Represents a specialized resource dictionary that contains color resources used
            by XAML elements.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.ColorPaletteResources.#ctor">
            <summary>
            Initializes a new instance of the ColorPaletteResources class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.Accent">
            <summary>
            Gets or sets the Accent color value.
            </summary>
            <returns>The Accent color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.AltHigh">
            <summary>
            Gets or sets the AltHigh color value.
            </summary>
            <returns>The AltHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.AltLow">
            <summary>
            Gets or sets the AltLow color value.
            </summary>
            <returns>The AltLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.AltMedium">
            <summary>
            Gets or sets the AltMedium color value.
            </summary>
            <returns>The AltMedium color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.AltMediumHigh">
            <summary>
            Gets or sets the AltMediumHigh color value.
            </summary>
            <returns>The AltMediumHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.AltMediumLow">
            <summary>
            Gets or sets the AltMediumLow color value.
            </summary>
            <returns>The AltMediumLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.BaseHigh">
            <summary>
            Gets or sets the BaseHigh color value.
            </summary>
            <returns>The BaseHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.BaseLow">
            <summary>
            Gets or sets the BaseLow color value.
            </summary>
            <returns>The BaseLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.BaseMedium">
            <summary>
            Gets or sets the BaseMedium color value.
            </summary>
            <returns>The BaseMedium color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.BaseMediumHigh">
            <summary>
            Gets or sets the BaseMediumHigh color value.
            </summary>
            <returns>The BaseMediumHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.BaseMediumLow">
            <summary>
            Gets or sets the BaseMediumLow color value.
            </summary>
            <returns>The BaseMediumLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeAltLow">
            <summary>
            Gets or sets the ChromeAltLow color value.
            </summary>
            <returns>The ChromeAltLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeBlackHigh">
            <summary>
            Gets or sets the ChromeBlackHigh color value.
            </summary>
            <returns>The ChromeBlackHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeBlackLow">
            <summary>
            Gets or sets the ChromeBlackLow color value.
            </summary>
            <returns>The ChromeBlackLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeBlackMedium">
            <summary>
            Gets or sets the ChromeBlackMedium color value.
            </summary>
            <returns>The ChromeBlackMedium color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeBlackMediumLow">
            <summary>
            Gets or sets the ChromeBlackMediumLow color value.
            </summary>
            <returns>The ChromeBlackMediumLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeDisabledHigh">
            <summary>
            Gets or sets the ChromeDisabledHigh color value.
            </summary>
            <returns>The ChromeDisabledHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeDisabledLow">
            <summary>
            Gets or sets the ChromeDisabledLow color value.
            </summary>
            <returns>The ChromeDisabledLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeGray">
            <summary>
            Gets or sets the ChromeGray color value.
            </summary>
            <returns>The ChromeGray color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeHigh">
            <summary>
            Gets or sets the ChromeHigh color value.
            </summary>
            <returns>The ChromeHigh color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeLow">
            <summary>
            Gets or sets the ChromeLow color value.
            </summary>
            <returns>The ChromeLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeMedium">
            <summary>
            Gets or sets the ChromeMedium color value.
            </summary>
            <returns>The ChromeMedium color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeMediumLow">
            <summary>
            Gets or sets the ChromeMediumLow color value.
            </summary>
            <returns>The ChromeMediumLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ChromeWhite">
            <summary>
            Gets or sets the ChromeWhite color value.
            </summary>
            <returns>The ChromeWhite color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ErrorText">
            <summary>
            Gets or sets the ErrorText color value.
            </summary>
            <returns>The ErrorText color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ListLow">
            <summary>
            Gets or sets the ListLow color value.
            </summary>
            <returns>The ListLow color value.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ColorPaletteResources.ListMedium">
            <summary>
            Gets or sets the ListMedium color value.
            </summary>
            <returns>The ListMedium color value.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource">
            <summary>
            Represents a shareable object used to create an icon that displays and controls a visual that can animate in response to user interaction and visual state changes.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.FallbackIconSourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.FallbackIconSource"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.FallbackIconSource">
            <summary>
            Gets or sets the static icon to use when the animated icon cannot run.
            </summary>
            <value>The static icon to use when the animated icon cannot run. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.MirroredWhenRightToLeftProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.MirroredWhenRightToLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.MirroredWhenRightToLeft">
            <summary>
            Gets or sets a value that indicates whether the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is RightToLeft.
            </summary>
            <value><see langword="true"/>, if the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is <see cref="F:System.Windows.FlowDirection.RightToLeft"/>. Otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.SourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.Source"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.Source">
            <summary>
            Gets or sets the animated visual shown by the <see cref="T:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon"/> object.
            </summary>
            <value>The animated visual shown by the <see cref="T:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon"/>. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.GetState(System.Windows.DependencyObject)">
            <summary>
            Retrieves the value of the AnimatedIcon.State attached property for the specified <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="control">The object from which the property value is retrieved.</param>
            <returns>The current value of the AnimatedIcon.State attached property on the specified dependency object.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.SetState(System.Windows.DependencyObject,System.String)">
            <summary>
            Specifies the value of the AnimatedIcon.State attached property for the specified <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The value of the AnimatedIcon.State attached property on the specified dependency object.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.AnimatedIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.BitmapIconSource">
            <summary>
            Represents an icon source that uses an Image as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.BitmapIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.UriSourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.UriSource"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.UriSource">
            <summary>
            Gets or sets the Uniform Resource Identifier (URI) of the bitmap to use as the icon content.
            </summary>
            <returns>
            The <see cref="T:System.Uri"/> of the bitmap to use as the icon content. The default is <see langword="null"/>.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.ShowAsMonochromeProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.ShowAsMonochrome"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
            <returns>
            <see langword="true"/> to show the bitmap in a single color;
            <see langword="false"/> to show the bitmap in full color. The default is <see langword="true"/>.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.BitmapIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler">
            <summary>
            Represents a method that handles the completed event of a deferred action.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.Deferral">
            <summary>
            Stores a <see cref="T:iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler"/> to be invoked upon completion of the deferral
            and manipulates the state of the deferral.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.Deferral.#ctor(iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler)">
            <summary>
            Initializes a new <see cref="T:iNKORE.UI.WPF.Modern.Common.Deferral"/> object and specifies a
            <see cref="T:iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler"/> to be called upon completion of the deferral.
            </summary>
            <param name="handler">A <see cref="T:iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler"/> to be called upon completion of the deferral.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.Deferral.Complete">
            <summary>
            If the <see cref="T:iNKORE.UI.WPF.Modern.Common.DeferralCompletedHandler"/> has not yet been invoked, this will call it
            and drop the reference to the delegate.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.Deferral.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.FontIconSource">
            <summary>
            Represents an icon source that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.FontIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.FontIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontFamily"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontFamily">
            <summary>
            Gets or sets the font used to display the icon glyph.
            </summary>
            <returns>
            The font used to display the icon glyph.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontSize"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontSize">
            <summary>
            Gets or sets the size of the icon glyph.
            </summary>
            <returns>
            A non-negative value that specifies the font size, measured in pixels.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontStyle">
            <summary>
            Gets or sets the font style for the icon glyph.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the style in which the icon glyph is rendered.
            The default is <see cref="P:System.Windows.FontStyles.Normal"/>.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontWeight"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontWeight">
            <summary>
            Gets or sets the thickness of the icon glyph.
            </summary>
            <returns>
            A value that specifies the thickness of the icon glyph.
            The default is <see cref="P:System.Windows.FontWeights.Normal"/>.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.GlyphProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.Glyph"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>
            The hexadecimal character code for the icon glyph.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.FontIconSource.IconProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.Icon"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.Icon">
            <summary>
            Gets or sets the wrapped icon, which includes <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.Glyph"/> and <see cref="P:iNKORE.UI.WPF.Modern.Common.FontIconSource.FontFamily"/>. You can get these instances from <see cref="N:iNKORE.UI.WPF.Modern.Common.IconKeys"/> namespace.
            If you are using Glyph and FontFamily property, this can be ignored.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.FontIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.IconSource">
            <summary>
            Represents the base class for an icon source.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.IconSource.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.IconSource.Foreground"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.IconSource.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground color.
            </summary>
            <returns>
            The brush that paints the foreground of the control. The default is <see langword="null"/>, (a null brush) which is
            evaluated as Transparent for rendering.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.IconSource.CreateIconElement">
            <summary>
            Creates an icon UI element.
            </summary>
            <returns>An icon UI element.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.IconSource.CreateIconElementCore">
            <summary>
            Creates an icon UI element.
            </summary>
            <returns>An icon UI element.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.ImageIconSource">
            <summary>
            Represents an icon source that uses a bitmap as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.ImageIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.ImageIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.ImageIconSource.ImageSourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.ImageIconSource.ImageSource"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.ImageIconSource.ImageSource">
            <summary>
            Gets or sets the URI of the image file to use as the icon.
            </summary>
            <returns>The <see cref="T:System.Uri"/> of the image file to use as the icon. The default is <see langword="null"/>.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.ImageIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.PasswordRevealMode">
            <summary>
            Defines constants that specify the password reveal behavior of a PasswordBox.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.PasswordRevealMode.Peek">
            <summary>
            The password reveal button is visible. The password is not obscured while the
            button is pressed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.PasswordRevealMode.Hidden">
            <summary>
            The password reveal button is not visible. The password is always obscured.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.PasswordRevealMode.Visible">
            <summary>
            The password reveal button is not visible. The password is not obscured.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.PathIconSource">
            <summary>
            Represents an icon source that uses a vector path as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.PathIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.PathIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.PathIconSource.DataProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.PathIconSource.Data"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.PathIconSource.Data">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Geometry"/>.
            </summary>
            <returns>
            A description of the shape to be drawn.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.PathIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo">
            <summary>
            Represents information about the visual states of font elements that represent
            a rating.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemFontInfo class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.DisabledGlyphProperty">
            <summary>
            Identifies the DisabledGlyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.DisabledGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that is disabled.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.GlyphProperty">
            <summary>
            Identifies the Glyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.Glyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has been set by the user.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PlaceholderGlyphProperty">
            <summary>
            Identifies the PlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that is showing a placeholder value.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PointerOverGlyphProperty">
            <summary>
            Identifies the PointerOverGlyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PointerOverGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has the pointer over it.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PointerOverPlaceholderGlyphProperty">
            <summary>
            Identifies the PointerOverPlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.PointerOverPlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            showing a placeholder value with the pointer over it.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.UnsetGlyphProperty">
            <summary>
            Identifies the UnsetGlyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.RatingItemFontInfo.UnsetGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has not been set.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.RatingItemInfo">
            <summary>
            Represents information about the visual states of the elements that represent
            a rating.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.RatingItemInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemInfo class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.SimpleVisualStateManager">
            <summary>
                Manages visual states and their transitions on a control.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.SimpleVisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
            <summary>
                Allows subclasses to override the GoToState logic.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.SimpleVisualStateManager.ShouldRunStateStoryboard(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.VisualState,System.Windows.VisualStateGroup)">
            <summary>
              If the stateGroupsRoot or control is removed from the tree, then the new
              storyboards will not be able to resolve target names. Thus,
              if the stateGroupsRoot or control is not in the tree, don't start the new
              storyboards. Also if the group has already changed state, then
              don't start the new storyboards.
            </summary> 
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.SimpleVisualStateManager.GetTransition(System.Windows.FrameworkElement,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Get the most appropriate transition between two states.
            </summary>
            <param name="element">Element being transitioned.</param>
            <param name="group">Group being transitioned.</param>
            <param name="from">VisualState being transitioned from.</param>
            <param name="to">VisualState being transitioned to.</param>
            <returns>
            The most appropriate transition between the desired states.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.SymbolIconSource">
            <summary>
            Represents an icon source that uses a glyph from the Segoe MDL2 Assets font as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.SymbolIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Common.SymbolIconSource"/> class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.SymbolIconSource.SymbolProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Common.SymbolIconSource.Symbol"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.SymbolIconSource.Symbol">
            <summary>
            Gets or sets the Segoe MDL2 Assets glyph used as the icon content.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the Segoe MDL2 Assets glyph to use.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.SymbolIconSource.CreateIconElementCore">
            <inheritdoc/>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Common.TypedEventHandler`2">
            <summary>
            Represents a method that handles general events.
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sender">The event source.</param>
            <param name="args">The event data. If there is no event data, this parameter will be null.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.StateNormal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.StateMouseOver">
            <summary>
            MouseOver state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.StatePressed">
            <summary>
            Pressed state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.StateDisabled">
            <summary>
            Disabled state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.StateReadOnly">
            <summary>
            Readonly state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Common.VisualStates.GroupCommon">
            <summary>
            Common state group
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.GetAmount(System.Windows.DependencyObject)">
            <summary>
            Gets the amount of gaussian blur to apply to the background.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The amount of gaussian blur to apply to the background.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.SetAmount(System.Windows.DependencyObject,System.Windows.Media.Color)">
            <summary>
            Sets the amount of gaussian blur to apply to the background.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.AmountProperty">
            <summary>
            Identifies the Amount dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.GetTintColor(System.Windows.DependencyObject)">
            <summary>
            Gets the tint for the panel
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The tint for the panel</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.SetTintColor(System.Windows.DependencyObject,System.Windows.Media.Color)">
            <summary>
            Sets the tint for the panel
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.TintColorProperty">
            <summary>
            Identifies the TintColor dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.GetTintOpacity(System.Windows.DependencyObject)">
            <summary>
            Gets the tint opacity factor for the effect (default is 0.8, must be in the [0, 1] range)
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The tint opacity factor for the effect</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.SetTintOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the tint opacity factor for the effect (default is 0.8, must be in the [0, 1] range)
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.TintOpacityProperty">
            <summary>
            Identifies the TintOpacity dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.NoiseOpacityProperty">
            <summary>
            Identifies the NoiseOpacity dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicElement.FallbackColorProperty">
            <summary>
            Identifies the FallbackColor dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TargetProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.Target"/> dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.CornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.SourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.AmountProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.Amount"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.Amount">
            <summary>
            Gets or sets the amount of gaussian blur to apply to the background.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.GetAmount(System.Windows.DependencyObject)">
            <summary>
            Gets the amount of gaussian blur to apply to the background.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The amount of gaussian blur to apply to the background.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.SetAmount(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the amount of gaussian blur to apply to the background.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintColorProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintColor"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintColor">
            <summary>
            Gets or sets the tint for the panel
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.GetTintColor(System.Windows.DependencyObject)">
            <summary>
            Gets the tint for the panel
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The tint for the panel</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.SetTintColor(System.Windows.DependencyObject,System.Windows.Media.Color)">
            <summary>
            Sets the tint for the panel
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintOpacityProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintOpacity"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.TintOpacity">
            <summary>
            Gets or sets the tint opacity factor for the effect (default is 0.8, must be in the [0, 1] range)
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.GetTintOpacity(System.Windows.DependencyObject)">
            <summary>
            Gets the tint opacity factor for the effect (default is 0.8, must be in the [0, 1] range)
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <returns>The tint opacity factor for the effect</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.SetTintOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the tint opacity factor for the effect (default is 0.8, must be in the [0, 1] range)
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.NoiseOpacityProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AcrylicPanel.NoiseOpacity"/> dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.AnimatedBackVisualSource">
            <summary>
            Represents an animation for a back arrow that can be used as an animated icon source.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon">
            <summary>
            Represents an icon that displays and controls a visual that can animate in response to user interaction and visual state changes.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.#ctor">
            <summary>
            Initializes a new instance of the AnimatedIcon class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.FallbackIconSourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.FallbackIconSource"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.FallbackIconSource">
            <summary>
            Gets or sets the static icon to use when the animated icon cannot run.
            </summary>
            <value>The static icon to use when the animated icon cannot run. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.MirroredWhenRightToLeftProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.MirroredWhenRightToLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.MirroredWhenRightToLeft">
            <summary>
            Gets or sets a value that indicates whether the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is RightToLeft.
            </summary>
            <value><see langword="true"/>, if the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is <see cref="F:System.Windows.FlowDirection.RightToLeft"/>. Otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.SourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.Source"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.Source">
            <summary>
            Gets or sets the animated visual shown by the <see cref="T:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon"/> object.
            </summary>
            <value>The animated visual shown by the <see cref="T:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon"/>. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.StateProperty">
            <summary>
            Identifies the State dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.GetState(System.Windows.DependencyObject)">
            <summary>
            Retrieves the value of the AnimatedIcon.State attached property for the specified <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="control">The object from which the property value is retrieved.</param>
            <returns>The current value of the AnimatedIcon.State attached property on the specified dependency object.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.AnimatedIcon.SetState(System.Windows.DependencyObject,System.String)">
            <summary>
            Specifies the value of the AnimatedIcon.State attached property for the specified <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The value of the AnimatedIcon.State attached property on the specified dependency object.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.FallbackIconSourceProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.FallbackIconSource"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.FallbackIconSource">
            <summary>
            Gets or sets the static icon to use when the animated icon cannot run.
            </summary>
            <value>The static icon to use when the animated icon cannot run. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.MirroredWhenRightToLeftProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.MirroredWhenRightToLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.MirroredWhenRightToLeft">
            <summary>
            Gets or sets a value that indicates whether the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is RightToLeft.
            </summary>
            <value><see langword="true"/>, if the icon is mirrored when the <see cref="T:System.Windows.FlowDirection"/> is <see cref="F:System.Windows.FlowDirection.RightToLeft"/>. Otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.StateProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.AnimatedVisualSource.State"/> dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.BitmapIcon">
            <summary>
            Represents an icon that uses a bitmap as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.BitmapIcon.#ctor">
            <summary>
            Initializes a new instance of the BitmapIcon class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.BitmapIcon.UriSourceProperty">
            <summary>
            Identifies the UriSource dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.BitmapIcon.UriSource">
            <summary>
            Gets or sets the Uniform Resource Identifier (URI) of the bitmap to use as the
            icon content.
            </summary>
            <value>The Uri of the bitmap to use as the icon content. The default is <see langword="null"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.BitmapIcon.ShowAsMonochromeProperty">
            <summary>
            Identifies the ShowAsMonochrome dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.BitmapIcon.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
            <value><see langword="true"/> to show the bitmap in a single color; <see langword="false"/> to show the bitmap in full color. The default is <see langword="true"/>.</value>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ClippingBorder">
            <Remarks>
                As a side effect ClippingBorder will surpress any databinding or animation of 
                    its childs UIElement.Clip property until the child is removed from ClippingBorder
            </Remarks>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx">
            <summary>
            ContentPresenter is used within the template of a content control to denote the
            place in the control's visual tree (control template) where the content
            is to be added.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontFamilyProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontFamily" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontFamily">
            <summary>
            The FontFamily property specifies the name of font family.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStyleProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStyle" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStyle">
            <summary>
            The FontStyle property requests normal, italic, and oblique faces within a font family.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontWeightProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontWeight" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontWeight">
            <summary>
            The FontWeight property specifies the weight of the font.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStretchProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStretch" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontStretch">
            <summary>
            The FontStretch property selects a normal, condensed, or extended face from a font family.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontSizeProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontSize" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.FontSize">
            <summary>
            The FontSize property specifies the size of the font.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.ForegroundProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.Foreground" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.Foreground">
            <summary>
            The Foreground property specifies the foreground brush of an element's text content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineHeightProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineHeight" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineHeight">
            <summary>
            The LineHeight property specifies the height of each generated line box.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineStackingStrategyProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineStackingStrategy" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.LineStackingStrategy">
            <summary>
            The LineStackingStrategy property specifies how lines are placed
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.TextWrappingProperty">
            <summary>
            DependencyProperty for <see cref="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.TextWrapping" /> property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ContentPresenterEx.TextWrapping">
            <summary>
            The TextWrapping property controls whether or not text wraps 
            when it reaches the flow edge of its containing block box.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Extensions.SourcePageType(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Gets the data type of the source page.
            </summary>
            <returns>
            The data type of the source page, represented as *namespace*.*type* or simply
            *type*.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Extensions.SourcePageType(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Gets the data type of the source page.
            </summary>
            <returns>
            The data type of the source page, represented as *namespace*.*type* or simply
            *type*.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Extensions.Parameter(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Gets any "Parameter" object passed to the target page for the navigation.
            </summary>
            <returns>
            An object that potentially passes parameters to the navigation target. May be
            null.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Extensions.Parameter(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Gets any "Parameter" object passed to the target page for the navigation.
            </summary>
            <returns>
            An object that potentially passes parameters to the navigation target. May be
            null.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.FontIcon">
            <summary>
            Represents an icon that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FontIcon.#ctor">
            <summary>
            Initializes a new instance of the FontIcon class.F
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontFamilyProperty">
            <summary>
            The identifier for the FontFamily dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontFamily">
            <summary>
            Gets or sets the font used to display the icon glyph.
            </summary>
            <returns>The font used to display the icon glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontSizeProperty">
            <summary>
            The identifier for the FontSize dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontSize">
            <summary>
            Gets or sets the size of the icon glyph.
            </summary>
            <returns>A non-negative value that specifies the font size, measured in pixels.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontStyleProperty">
            <summary>
            The identifier for the FontStyle dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontStyle">
            <summary>
            Gets or sets the font style for the icon glyph.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the style in which the icon
            glyph is rendered. The default is **Normal**.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontWeightProperty">
            <summary>
            The identifier for the FontWeight dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontWeight">
            <summary>
            Gets or sets the thickness of the icon glyph.
            </summary>
            <returns>
            A value that specifies the thickness of the icon glyph. The default is **Normal**.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.GlyphProperty">
            <summary>
            The identifier for the Glyph dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>The hexadecimal character code for the icon glyph.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FontIcon.IconProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.Icon"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.Icon">
            <summary>
            Gets or sets the wrapped icon, which includes <see cref="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.Glyph"/> and <see cref="P:iNKORE.UI.WPF.Modern.Controls.FontIcon.FontFamily"/>. You can get these instances from <see cref="N:iNKORE.UI.WPF.Modern.Common.IconKeys"/> namespace.
            If you are using Glyph and FontFamily property, this can be ignored.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Frame">
            <summary>
            Displays Page instances, supports navigation to new pages, and maintains a navigation
            history to support forward and backward navigation.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.#ctor">
            <summary>
            Initialzies a new instance of the Frame class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Frame.SourcePageTypeProperty">
            <summary>
            Identifies the SourcePageType dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Frame.SourcePageType">
            <summary>
            Gets or sets a type reference of the current content, or the content that should
            be navigated to.
            </summary>
            <returns>
            A type reference for the current content, or the content to navigate to.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Frame.CurrentSourcePageTypeProperty">
            <summary>
            Identifies the CurrentSourcePageType dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Frame.CurrentSourcePageType">
            <summary>
            Gets a type reference for the content that is currently displayed.
            </summary>
            <returns>
            A type reference for the content that is currently displayed.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Frame.BackStackDepthProperty">
            <summary>
            Identifies the BackStackDepth dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Frame.BackStackDepth">
            <summary>
            Gets the number of entries in the navigation back stack.
            </summary>
            <returns>The number of entries in the navigation back stack.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Frame.ContentTransitionsProperty">
            <summary>
            Identifies the ContentTransitions dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Frame.ContentTransitions">
            <summary>
            Gets or sets the collection of Transition style elements that apply to the content
            of a ContentControl.
            </summary>
            <returns>The strongly typed collection of Transition style elements.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Type)">
            <summary>
            Causes the Frame to load content represented by the specified Page.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Type,System.Object)">
            <summary>
            Causes the Frame to load content represented by the specified Page, also passing
            a parameter to be interpreted by the target of the navigation.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <param name="parameter">The navigation parameter to pass to the target page.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Type,System.Object,iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Causes the Frame to load content represented by the specified Page -derived data
            type, also passing a parameter to be interpreted by the target of the navigation,
            and a value indicating the animated transition to use.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <param name="parameter">The navigation parameter to pass to the target page.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Object,iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates asynchronously to content that is contained by an object.
            </summary>
            <param name="content">An System.Object that contains the content to navigate to.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Object,System.Object,iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates asynchronously to content that is contained by an object, and passes
            an object that contains data to be used for processing during navigation.
            </summary>
            <param name="content">An System.Object that contains the content to navigate to.</param>
            <param name="extraData">A System.Object that contains data to be used for processing during navigation.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.Navigate(System.Uri,System.Object,iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates asynchronously to source content located at a uniform resource identifier
            (URI), and passes an object that contains data to be used for processing during
            navigation, and a value indicating the animated transition to use.
            </summary>
            <param name="source">A System.Uri object initialized with the URI for the desired content.</param>
            <param name="extraData">A System.Object that contains data to be used for processing during navigation.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Frame.GoBack(iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages
            its own navigation history, and specifies the animated transition to use.
            </summary>
            <param name="transitionInfoOverride">Info about the animated transition to use.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ClipHelper.GetCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            Gets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ClipHelper.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            Sets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ClipHelper.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ComboBoxHelper.TextBoxStyleProperty">
            <summary>
            Identifies the TextBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ComboBoxHelper.GetTextBoxStyle(System.Windows.Controls.ComboBox)">
            <summary>
            Gets the style of the TextBox in the ComboBox when the ComboBox is editable.
            </summary>
            <param name="comboBox">The element from which to read the property value.</param>
            <returns>The style of the TextBox in the ComboBox when the ComboBox is editable.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ComboBoxHelper.SetTextBoxStyle(System.Windows.Controls.ComboBox,System.Windows.Style)">
            <summary>
            Sets the style of the TextBox in the ComboBox when the ComboBox is editable.
            </summary>
            <param name="comboBox">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetCornerRadius(System.Windows.Controls.Control)">
            <summary>
            Gets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetCornerRadius(System.Windows.Controls.Control,System.Windows.CornerRadius)">
            <summary>
            Sets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetHeader(System.Windows.Controls.Control)">
            <summary>
            Gets the content for the control's header.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The content of the control's header. The default is **null**.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetHeader(System.Windows.Controls.Control,System.Object)">
            <summary>
            Sets the content for the control's header.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetHeaderTemplate(System.Windows.Controls.Control)">
            <summary>
            Gets the DataTemplate used to display the content of the control's header.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The template that specifies the visualization of the header object. The default
            is **null**.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetHeaderTemplate(System.Windows.Controls.Control,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the control's header.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetPlaceholderText(System.Windows.Controls.Control)">
            <summary>
            Gets the text that is displayed in the control until the value is changed
            by a user action or some other operation.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The text that is displayed in the control when no value is entered. The default
            is an empty string ("").
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetPlaceholderText(System.Windows.Controls.Control,System.String)">
            <summary>
            Sets the text that is displayed in the control until the value is changed
            by a user action or some other operation.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.PlaceholderTextProperty">
            <summary>
            Identifies the PlaceholderText dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetPlaceholderForeground(System.Windows.Controls.Control)">
            <summary>
            Gets a brush that describes the color of placeholder text.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The brush that describes the color of placeholder text.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetPlaceholderForeground(System.Windows.Controls.Control,System.Windows.Media.Brush)">
            <summary>
            Sets a brush that describes the color of placeholder text.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.PlaceholderForegroundProperty">
            <summary>
            Identifies the PlaceholderForeground dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetDescription(System.Windows.Controls.Control)">
            <summary>
            Gets content that is shown below the control. The content should provide
            guidance about the input expected by the control.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The content to be displayed below the control. The default is **null**.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetDescription(System.Windows.Controls.Control,System.Object)">
            <summary>
            Sets content that is shown below the control. The content should provide
            guidance about the input expected by the control.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.DescriptionProperty">
            <summary>
            Identifies the Description dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.VisualStateProperty">
            <summary>
            Identifies the VisualState dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.GetVisualState(System.Windows.FrameworkElement)">
            <summary>
            Gets the visual state for the control.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <returns>The visual state for the control.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ControlHelper.SetVisualState(System.Windows.FrameworkElement,System.String)">
            <summary>
            Sets the visual state for the control.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The visual state for the control.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetFocusVisualPrimaryBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the brush used to draw the outer border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The brush used to draw the outer border of a HighVisibility focus visual.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetFocusVisualPrimaryBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the outer border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualPrimaryBrushProperty">
            <summary>
            Identifies the FocusVisualPrimaryBrush dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetFocusVisualSecondaryBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the brush used to draw the inner border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The brush used to draw the inner border of a HighVisibility focus visual.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetFocusVisualSecondaryBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the inner border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualSecondaryBrushProperty">
            <summary>
            Identifies the FocusVisualSecondaryBrush dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetFocusVisualPrimaryThickness(System.Windows.FrameworkElement)">
            <summary>
            Gets the thickness of the outer border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            The thickness of the outer border of a HighVisibility focus visual. The default
            value is 2.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetFocusVisualPrimaryThickness(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the thickness of the outer border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualPrimaryThicknessProperty">
            <summary>
            Identifies the FocusVisualPrimaryThickness dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetFocusVisualSecondaryThickness(System.Windows.FrameworkElement)">
            <summary>
            Gets the thickness of the inner border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            The thickness of the inner border of a HighVisibility focus visual. The default
            value is 1.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetFocusVisualSecondaryThickness(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the thickness of the inner border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualSecondaryThicknessProperty">
            <summary>
            Identifies the FocusVisualSecondaryThickness dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetFocusVisualMargin(System.Windows.FrameworkElement)">
            <summary>
            Gets the outer margin of the focus visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            Provides margin values for the focus visual. The default value is a default Thickness
            with all properties (dimensions) equal to 0.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetFocusVisualMargin(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the outer margin of the focus visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualMarginProperty">
            <summary>
            Identifies the FocusVisualMargin dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetUseSystemFocusVisuals(System.Windows.Controls.Control)">
            <summary>
            Gets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <param name="control">The object from which the property value is read.</param>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetUseSystemFocusVisuals(System.Windows.Controls.Control,System.Boolean)">
            <summary>
            Sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <param name="control">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.IsTemplateFocusTargetProperty">
            <summary>
            Identifies the Control.IsTemplateFocusTarget XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.GetIsTemplateFocusTarget(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the Control.IsTemplateFocusTarget XAML attached property for
            the target element.
            </summary>
            <param name="element">The object from which the property value is read.</param>
            <returns>
            The Control.IsTemplateFocusTarget XAML attached property value of the specified
            object.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.SetIsTemplateFocusTarget(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets the value of the Control.IsTemplateFocusTarget XAML attached property for
            a target element.
            </summary>
            <param name="element">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure adorner. Default behavior is to size to match the adorned element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
                Default control arrangement is to only arrange
                the first visual child. No transforms will be applied.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualAdorner.VisualChildrenCount">
             <summary>
              Derived classes override this property to enable the Visual code to enumerate
              the Visual children. Derived classes need to return the number of children
              from this method.
            
                By default a Visual does not have any children.
            
              Remark:
                  During this virtual method the Visual tree must not be modified.
             </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.FocusVisualHelper.FocusVisualAdorner.GetVisualChild(System.Int32)">
             <summary>
               Derived class must implement to support Visual children. The method must return
                the child at the specified index. Index must be between 0 and GetVisualChildrenCount-1.
            
                By default a Visual does not have any children.
            
              Remark:
                   During this virtual call it is not valid to modify the Visual tree.
             </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.GetHeader(System.Windows.Controls.ListBox)">
            <summary>
            Gets the content for the list header.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <returns>The content of the list header. The default value is null.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.SetHeader(System.Windows.Controls.ListBox,System.Object)">
            <summary>
            Sets the content for the list header.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <param name="value">The content of the list header. The default value is null.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.GetHeaderTemplate(System.Windows.Controls.ListBox)">
            <summary>
            Gets the DataTemplate used to display the content of the view header.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <returns>The DataTemplate used to display the content of the view header.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.SetHeaderTemplate(System.Windows.Controls.ListBox,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the view header.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <param name="value">The DataTemplate used to display the content of the view header.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.FooterProperty">
            <summary>
            Identifies the Footer dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.GetFooter(System.Windows.Controls.ListBox)">
            <summary>
            Gets the content for the list footer.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <returns>The content of the list footer. The default value is null.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.SetFooter(System.Windows.Controls.ListBox,System.Object)">
            <summary>
            Sets the content for the list footer.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <param name="value">The content of the list footer. The default value is null.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.FooterTemplateProperty">
            <summary>
            Identifies the FooterTemplate dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.GetFooterTemplate(System.Windows.Controls.ListBox)">
            <summary>
            Gets the DataTemplate used to display the content of the view footer.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <returns>The DataTemplate used to display the content of the view footer.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.ListViewHelper.SetFooterTemplate(System.Windows.Controls.ListBox,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the view footer.
            </summary>
            <param name="listbox">The element from which to read the property value.</param>
            <param name="value">The DataTemplate used to display the content of the view footer.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.PasswordBoxHelper.GetPasswordRevealMode(System.Windows.Controls.PasswordBox)">
            <summary>
            Gets a value that specifies whether the password is always, never, or
            optionally obscured.
            </summary>
            <param name="passwordBox">The element from which to read the property value.</param>
            <returns>
            A value of the enumeration that specifies whether the password is always, never,
            or optionally obscured. The default is **Peek**.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.PasswordBoxHelper.SetPasswordRevealMode(System.Windows.Controls.PasswordBox,iNKORE.UI.WPF.Modern.Common.PasswordRevealMode)">
            <summary>
            Sets a value that specifies whether the password is always, never, or
            optionally obscured.
            </summary>
            <param name="passwordBox">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.PasswordBoxHelper.PasswordRevealModeProperty">
            <summary>
            Identifies the PasswordRevealMode dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper">
            <summary>
            TabView Properties
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabStripHeaderProperty">
            <summary>
            Identifies the TabStripHeader dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetTabStripHeader(System.Windows.Controls.TabControl)">
            <summary>
            Gets the content that is shown to the left of the tab strip.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <returns>The element that is shown to the left of the tab strip.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetTabStripHeader(System.Windows.Controls.TabControl,System.Object)">
            <summary>
            Sets the content that is shown to the left of the tab strip.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <param name="value">The element that is shown to the left of the tab strip.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabStripHeaderTemplateProperty">
            <summary>
            Identifies the TabStripHeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetTabStripHeaderTemplate(System.Windows.Controls.TabControl)">
            <summary>
            Gets the DataTemplate used to display the content of the TabStripHeader.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <returns>The DataTemplate used to display the content of the TabStripHeader.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetTabStripHeaderTemplate(System.Windows.Controls.TabControl,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the TabStripHeader.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <param name="value">The DataTemplate used to display the content of the TabStripHeader.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabStripFooterProperty">
            <summary>
            Identifies the TabStripFooter dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetTabStripFooter(System.Windows.Controls.TabControl)">
            <summary>
            Gets the content that is shown to the right of the tab strip.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <returns>The element that is shown to the right of the tab strip.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetTabStripFooter(System.Windows.Controls.TabControl,System.Object)">
            <summary>
            Sets the content that is shown to the right of the tab strip.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <param name="value">The element that is shown to the right of the tab strip.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabStripFooterTemplateProperty">
            <summary>
            Identifies the TabStripFooterTemplate dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetTabStripFooterTemplate(System.Windows.Controls.TabControl)">
            <summary>
            Gets the DataTemplate used to display the content of the TabStripFooter.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <returns>The DataTemplate used to display the content of the TabStripFooter</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetTabStripFooterTemplate(System.Windows.Controls.TabControl,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the TabStripFooter.
            </summary>
            <param name="tabControl">The element from which to read the property value.</param>
            <param name="value">The DataTemplate used to display the content of the TabStripFooter</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.ContentBackgroundProperty">
            <summary>
            Identifies the ContentBackground dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.CloseButtonOverlayModeProperty">
            <summary>
            Identifies the CloseButtonOverlayMode dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetCloseButtonOverlayMode(System.Windows.Controls.TabControl)">
            <summary>
            Gets a value that indicates the behavior of the close button within tabs.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>A value of the enumeration that describes the behavior of the close button within tabs. The default is Auto.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetCloseButtonOverlayMode(System.Windows.Controls.TabControl,iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewCloseButtonOverlayMode)">
            <summary>
            Sets a value that indicates the behavior of the close button within tabs.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <param name="value">A value of the enumeration that describes the behavior of the close button within tabs. The default is Auto.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabWidthModeProperty">
            <summary>
            Identifies the TabWidthMode dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabWidthModeMode(System.Windows.Controls.TabControl)">
            <summary>
            Gets how the tabs should be sized.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The enum for how the tabs should be sized.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetTabWidthMode(System.Windows.Controls.TabControl,iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewWidthMode)">
            <summary>
            Sets how the tabs should be sized.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <param name="value">The enum for how the tabs should be sized.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.IsAddTabButtonVisibleProperty">
            <summary>
            Identifies the IsAddTabButtonVisible dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetIsAddTabButtonVisible(System.Windows.Controls.TabControl)">
            <summary>
            Gets whether the add (+) tab button is visible.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>Whether the add (+) tab button is visible. The default is Ture.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetIsAddTabButtonVisible(System.Windows.Controls.TabControl,System.Boolean)">
            <summary>
            Sets whether the add (+) tab button is visible.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <param name="value">Whether the add (+) tab button is visible.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.TabControlHelperEventsProperty">
            <summary>
            Identifies the TabControlHelperEvents dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.AddTabButtonCommandProperty">
            <summary>
            Identifies the AddTabButtonCommand dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetAddTabButtonCommand(System.Windows.Controls.TabControl)">
            <summary>
            Gets the command to invoke when the add (+) button is tapped.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The command to invoke when the add (+) button is tapped.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetAddTabButtonCommand(System.Windows.Controls.TabControl,System.Windows.Input.ICommand)">
            <summary>
            Sets the command to invoke when the add (+) button is tapped.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <param name="value">The command to invoke when the add (+) button is tapped.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.AddTabButtonCommandParameterProperty">
            <summary>
            Identifies the AddTabButtonCommandParameter dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.GetAddTabButtonCommandParameter(System.Windows.Controls.TabControl)">
            <summary>
            Gets the parameter to pass to the AddTabButtonCommand property.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The parameter to pass to the AddTabButtonCommand property.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelper.SetAddTabButtonCommandParameter(System.Windows.Controls.TabControl,System.Object)">
            <summary>
            Sets the parameter to pass to the AddTabButtonCommand property.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <param name="value">The parameter to pass to the AddTabButtonCommand property.</param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewWidthMode">
            <summary>
            Defines constants that specify the width of the tabs.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewWidthMode.Equal">
            <summary>
            Each tab has the same width.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewWidthMode.SizeToContent">
            <summary>
            Each tab adjusts its width to the content within the tab.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewWidthMode.Compact">
            <summary>
            Unselected tabs collapse to show only their icon. The selected tab adjusts to display the content within the tab.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewCloseButtonOverlayMode">
            <summary>
            Defines constants that describe the behavior of the close button contained within each <see cref="T:System.Windows.Controls.TabItem"/>.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewCloseButtonOverlayMode.Auto">
            <summary>
            Behavior is defined by the framework. Default.
            This value maps to Always.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewCloseButtonOverlayMode.OnPointerOver">
            <summary>
            The selected tab always shows the close button if it is closable. Unselected tabs show the close button when the tab is closable and the user has their pointer over the tab.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewCloseButtonOverlayMode.Always">
            <summary>
            The selected tab always shows the close button if it is closable. Unselected tabs always show the close button if they are closable.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewTabCloseRequestedEventArgs">
            <summary>
            Provides data for a tab close event.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewTabCloseRequestedEventArgs.Item">
            <summary>
            Gets a value that represents the data context for the tab in which a close is being requested.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Helpers.TabViewTabCloseRequestedEventArgs.Tab">
            <summary>
            Gets the tab in which a close is being requested.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelperEvents">
            <summary>
            Events for TabControlHelper.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelperEvents.AddTabButtonClick">
            <summary>
            Occurs when the add (+) tab button has been clicked.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabControlHelperEvents.TabCloseRequested">
            <summary>
            Raised when the user attempts to close a Tab via clicking the x-to-close button, CTRL+F4, or mousewheel.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelper">
            <summary>
            TabViewItem Properties
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelper.GetIcon(System.Windows.Controls.TabItem)">
            <summary>
            Sets the value for the Icon to be displayed within the tab.
            </summary>
            <param name="tabItem">The element from which to read the property value.</param>
            <returns>The Icon to be displayed within the tab.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelper.SetIcon(System.Windows.Controls.TabItem,System.Object)">
            <summary>
            Gets the value for the Icon to be displayed within the tab.
            </summary>
            <param name="tabItem">The element from which to read the property value.</param>
            <param name="value">The Icon to be displayed within the tab.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelper.IconProperty">
            <summary>
            Identifies the Icon dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelper.TabItemHelperEventsProperty">
            <summary>
            Identifies the TabItemHelperEvents dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelperEvents">
            <summary>
            Events for TabItemHelper.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TabItemHelperEvents.CloseRequested">
            <summary>
            Raised when the user attempts to close the TabViewItem via clicking the x-to-close button, CTRL+F4, or mousewheel.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetCollapsedGlyph(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for a collapsed tree node.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetCollapsedGlyph(System.Windows.Controls.TreeViewItem,System.String)">
            <summary>
            Sets the glyph to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.CollapsedGlyphProperty">
            <summary>
            Identifies the CollapsedGlyph dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetExpandedGlyph(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for an expanded tree node.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetExpandedGlyph(System.Windows.Controls.TreeViewItem,System.String)">
            <summary>
            Sets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.ExpandedGlyphProperty">
            <summary>
            Identifies the ExpandedGlyph dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetCollapsedPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the path to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for a collapsed tree node.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetCollapsedPath(System.Windows.Controls.TreeViewItem,System.Windows.Media.Geometry)">
            <summary>
            Sets the path to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.CollapsedPathProperty">
            <summary>
            Identifies the CollapsedPath dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetExpandedPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for an expanded tree node.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetExpandedPath(System.Windows.Controls.TreeViewItem,System.Windows.Media.Geometry)">
            <summary>
            Sets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.ExpandedPathProperty">
            <summary>
            Identifies the ExpandedPath dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetGlyphBrush(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the Brush used to paint node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The Brush used to paint node glyphs on a TreeView.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetGlyphBrush(System.Windows.Controls.TreeViewItem,System.Windows.Media.Brush)">
            <summary>
            Sets the Brush used to paint node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GlyphBrushProperty">
            <summary>
            Identifies the GlyphBrush dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetGlyphOpacity(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the opacity of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The opacity of node glyphs on a TreeView.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetGlyphOpacity(System.Windows.Controls.TreeViewItem,System.Double)">
            <summary>
            Sets the opacity of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GlyphOpacityProperty">
            <summary>
            Identifies the GlyphOpacity dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetGlyphSize(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the size of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The opacity of size glyphs on a TreeView.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.SetGlyphSize(System.Windows.Controls.TreeViewItem,System.Double)">
            <summary>
            Sets the size of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GlyphSizeProperty">
            <summary>
            Identifies the GlyphSize attached property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.IndentationProperty">
            <summary>
            Identifies the Indentation dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Helpers.TreeViewItemHelper.GetIndentation(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the amount that the item is indented.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The amount that the item is indented.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper">
            <summary>
            用来使窗口变得全屏的辅助类
            采用设置窗口位置和尺寸，确保盖住整个屏幕的方式来实现全屏
            目前已知需要满足的条件是：窗口盖住整个屏幕、窗口没有WS_THICKFRAME样式、窗口不能有标题栏且最大化
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.BeforeFullScreenWindowPlacementProperty">
            <summary>
            用于记录窗口全屏前位置的附加属性
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.BeforeFullScreenWindowStyleProperty">
            <summary>
            用于记录窗口全屏前样式的附加属性
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.StartFullScreen(System.Windows.Window)">
            <summary>
            开始进入全屏模式
            进入全屏模式后，窗口可通过 API 方式（也可以用 Win + Shift + Left/Right）移动，调整大小，但会根据目标矩形寻找显示器重新调整到全屏状态。
            进入全屏后，不要修改样式等窗口属性，在退出时，会恢复到进入前的状态
            进入全屏模式后会禁用 DWM 过渡动画
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.EndFullScreen(System.Windows.Window)">
            <summary>
            退出全屏模式
            窗口会回到进入全屏模式时保存的状态
            退出全屏模式后会重新启用 DWM 过渡动画
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.KeepFullScreenHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            确保窗口全屏的Hook
            使用HandleProcessCorruptedStateExceptions，防止访问内存过程中因为一些致命异常导致程序崩溃
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.Win32.ShowWindowCommands.SW_MAXIMIZE">
            <summary>
                Maximizes the specified window.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.Win32.ShowWindowCommands.SW_RESTORE">
            <summary>
                Activates and displays the window. If the window is minimized or maximized, the system restores it to its original
                size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.MonitorInfo.Size">
            <summary>
                The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.MonitorInfo.MonitorRect">
            <summary>
                A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that
                if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.MonitorInfo.WorkRect">
            <summary>
                A RECT structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen
                coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may
                be negative values.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.MonitorInfo.Flags">
            <summary>
                A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.MonitorFlag.MONITOR_DEFAULTTOPRIMARY">
            <summary>
                Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.HwndZOrder.HWND_TOP">
            <summary>
                Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.GetWindowLongFields.GWL_STYLE">
            <summary>
            设定一个新的窗口风格
            Retrieves the window styles
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowPositionFlags.SWP_NOCOPYBITS">
            <summary>
            <para>
            清除客户区的所有内容。如果未设置该标志，客户区的有效内容被保存并且在窗口尺寸更新和重定位后拷贝回客户区
            </para>
                Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client
                area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowPositionFlags.SWP_NOMOVE">
            <summary>
            <para>
            维持当前位置（忽略X和Y参数）
            </para>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowPositionFlags.SWP_NOREDRAW">
            <summary>
            <para>
            不重画改变的内容。如果设置了这个标志，则不发生任何重画动作。适用于客户区和非客户区（包括标题栏和滚动条）和任何由于窗回移动而露出的父窗口的所有部分。如果设置了这个标志，应用程序必须明确地使窗口无效并区重画窗口的任何部分和父窗口需要重画的部分
            </para>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area,
                the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a
                result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any
                parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowPositionFlags.SWP_NOSIZE">
            <summary>
            <para>
            维持当前尺寸（忽略 cx 和 cy 参数）
            </para>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowPositionFlags.SWP_NOZORDER">
            <summary>
            <para>
            维持当前 Z 序（忽略 hWndlnsertAfter 参数）
            </para>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.Rectangle.Width">
            <summary>
            矩形的宽度
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.Rectangle.Height">
            <summary>
            矩形的高度
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowStyles.WS_MAXIMIZE">
            <summary>
                The window is initially maximized.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowStyles.WS_MAXIMIZEBOX">
            <summary>
                The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must
                also be specified.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowStyles.WS_MINIMIZE">
            <summary>
                The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.FullScreenHelper.WindowStyles.WS_THICKFRAME">
            <summary>
                The window has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.BackRequestedEventArgs">
            <summary>
            Provides event data for the BackRequested event.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.DataGridCellPresenter">
            <summary>
            Represents the visual elements of a DataGridCell.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.DataGridCellPresenter.#ctor">
            <summary>
            Initializes a new instance of the DataGridCellPresenter class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.PanelHelper.SpacingProperty">
            <summary>
            Identifies the Spacing dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.PanelHelper.GetSpacing(System.Windows.Controls.Panel)">
            <summary>
            Gets a uniform distance (in pixels) between stacked items. It is applied in the direction of the StackPanel's Orientation.
            </summary>
            <param name="panel">The element from which to read the property value.</param>
            <returns>The uniform distance (in pixels) between stacked items.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.PanelHelper.SetSpacing(System.Windows.Controls.Panel,System.Double)">
            <summary>
            Sets a uniform distance (in pixels) between stacked items. It is applied in the direction of the StackPanel's Orientation.
            </summary>
            <param name="panel">The element from which to read the property value.</param>
            <param name="value">The uniform distance (in pixels) between stacked items.</param>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.PopupPositioner.PlacementInternal">
            <summary>
                Tooltips should show on Keyboard focus.
                Chooses the behavior of where the Popup should be placed on screen.
                Takes into account TreatMousePlacementAsBottom to place tooltips correctly on keyboard focus.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.ScrollingIndicatorMode">
            <summary>
            Defines constants that specify input-specific transition animations that are
            part of the default template for ScrollBar.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.ScrollingIndicatorMode.None">
            <summary>
            Do not use input-specific transitions.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.ScrollingIndicatorMode.TouchIndicator">
            <summary>
            Use input-specific transitions that are appropriate for touch input.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.ScrollingIndicatorMode.MouseIndicator">
            <summary>
            Use input-specific transitions that are appropriate for mouse input.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBar.IsBackEnabledProperty">
            <summary>
            Identifies the IsBackEnabled attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBar.GetIsBackEnabled(System.Windows.Window)">
            <summary>
            Gets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <param name="window">The element from which to read the property value.</param>
            <returns>true if the back button is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBar.SetIsBackEnabled(System.Windows.Window,System.Boolean)">
            <summary>
            Sets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <param name="window">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBar.BackRequestedEvent">
            <summary>
            Identifies the BackRequested routed event.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBarControl.IsBackEnabledProperty">
            <summary>
            Identifies the IsBackEnabled attached property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBarControl.IsBackEnabled">
            <summary>
            Gets or sets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <returns>true if the back button is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.IconElement">
            <summary>
            Represents the base class for an icon UI element.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.IconElement.ForegroundProperty">
            <summary>
            Identifies the Foreground dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.IconElement.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground color.
            </summary>
            <value>The brush that paints the foreground of the control.</value>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.IconElement.CreateIconSource">
            <summary>
            Creates an icon source.
            </summary>
            <returns>An icon source.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.IconElement.CreateIconSourceCore">
            <summary>
            Creates an icon source.
            </summary>
            <returns>An icon source.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ImageIcon">
            <summary>
            Represents an icon that uses an Image as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ImageIcon.#ctor">
            <summary>
            Initializes a new instance of the ImageIcon class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ImageIcon.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ImageIcon.Source">
            <summary>
            Gets or sets the URI of the image file to use as the icon.
            </summary>
            <value>The URI of the image file to use as the icon. The default is <see langword="null"/>.</value>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ListViewBaseHeaderItem">
            <summary>
            Provides the infrastructure for the ListViewHeaderItem and GridViewHeaderItem
            classes.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBaseHeaderItem.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBaseHeaderItem.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBaseHeaderItem.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBaseHeaderItem.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ListViewHeaderItem">
            <summary>
            Represents items in the header for grouped data inside a ListView.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ListViewHeaderItem.#ctor">
            <summary>
            Initializes a new instance of the ListViewHeaderItem class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Page">
            <summary>
            Represents content that a Frame control can navigate to.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Page.#ctor">
            <summary>
            Initializes a new instance of the Page class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Page.FrameProperty">
            <summary>
            Identifies the Frame dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Page.Frame">
            <summary>
            Gets the controlling Frame for the Page content.
            </summary>
            <returns>
            The controlling Frame for the Page content.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Page.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Invoked when the Page is loaded and becomes the current source of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the pending navigation that will load the current Page. Usually the most relevant
            property to examine is Parameter.
            </param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Page.OnNavigatingFrom(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Invoked immediately before the Page is unloaded and is no longer the current
            source of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the navigation that will unload the current Page unless canceled. The navigation
            can potentially be canceled by setting Cancel.
            </param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Page.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Invoked immediately after the Page is unloaded and is no longer the current source
            of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the navigation that has unloaded the current Page.
            </param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.PathIcon">
            <summary>
            Represents an icon that uses a vector path as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PathIcon.#ctor">
            <summary>
            Initializes a new instance of the PathIcon class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PathIcon.DataProperty">
            <summary>
            Identifies the Data dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.PathIcon.Data">
            <summary>
            Gets or sets a Geometry that specifies the shape to be drawn. In XAML. this can
            also be set using a string that describes Move and draw commands syntax.
            </summary>
            <value>A description of the shape to be drawn.</value>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.CanVerticallyScroll">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.CanHorizontallyScroll">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.ExtentWidth">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.ExtentHeight">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.ViewportWidth">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.ViewportHeight">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.HorizontalOffset">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.VerticalOffset">
            <inheritdoc/>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.ScrollOwner">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.LineUp">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.LineDown">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.LineLeft">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.LineRight">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.MouseWheelUp">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.MouseWheelDown">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.MouseWheelLeft">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.MouseWheelRight">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.PageUp">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.PageDown">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.PageLeft">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.PageRight">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.SetHorizontalOffset(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollInfoAdapter.SetVerticalOffset(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx.OnInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Single})">
            <summary>
            Causes the <see cref="T:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx"/> to load a new view into the viewport using the specified offsets and zoom factor.
            </summary>
            <param name="horizontalOffset">A value between 0 and <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth"/> that specifies the distance the content should be scrolled horizontally.</param>
            <param name="verticalOffset">A value between 0 and <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight"/> that specifies the distance the content should be scrolled vertically.</param>
            <param name="zoomFactor">A value between MinZoomFactor and MaxZoomFactor that specifies the required target ZoomFactor.</param>
            <returns><see langword="true"/> if the view is changed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Causes the <see cref="T:iNKORE.UI.WPF.Modern.Controls.ScrollViewerEx"/> to load a new view into the viewport using the specified offsets and zoom factor, and optionally disables scrolling animation.
            </summary>
            <param name="horizontalOffset">A value between 0 and <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth"/> that specifies the distance the content should be scrolled horizontally.</param>
            <param name="verticalOffset">A value between 0 and <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight"/> that specifies the distance the content should be scrolled vertically.</param>
            <param name="zoomFactor">A value between MinZoomFactor and MaxZoomFactor that specifies the required target ZoomFactor.</param>
            <param name="disableAnimation"><see langword="true"/> to disable zoom/pan animations while changing the view; otherwise, <see langword="false"/>. The default is false.</param>
            <returns><see langword="true"/> if the view is changed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel">
            <summary>
            Arranges child elements into a single line that can be oriented horizontally
            or vertically.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.#ctor">
            <summary>
            Initializes a new instance of the SimpleStackPanel class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are
            stacked.
            </summary>
            <returns>The Orientation of child content.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.Spacing">
            <summary>
            Gets or sets a uniform distance (in pixels) between stacked items. It is applied
            in the direction of the SimpleStackPanel's Orientation.
            </summary>
            <returns>The uniform distance (in pixels) between stacked items.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.SpacingProperty">
            <summary>
            Identifies the Spacing dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.HasLogicalOrientation">
            <summary>
            Gets a value that indicates if this SimpleStackPanel has vertical
            or horizontal orientation.
            </summary>
            <returns>This property always returns true.</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.LogicalOrientation">
            <summary>
            Gets a value that represents the Orientation of the SimpleStackPanel.
            </summary>
            <returns>An Orientation value.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a SimpleStackPanel in anticipation
            of arranging them during the SimpleStackPanel.ArrangeOverride(System.Windows.Size)
            pass.
            </summary>
            <param name="constraint">An upper limit System.Windows.Size that should not be exceeded.</param>
            <returns>The System.Windows.Size that represents the desired size of the element.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.SimpleStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a SimpleStackPanel element.
            </summary>
            <param name="arrangeSize">The System.Windows.Size that this element should use to arrange its child elements.</param>
            <returns>
            The System.Windows.Size that represents the arranged size of this SimpleStackPanel
            element and its child elements.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Symbol">
            <summary>
            Defines constants that specify a glyph from the **Segoe MDL2 Assets** font to
            use as the content of a SymbolIcon.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.SymbolIcon">
            <summary>
            Represents an icon that uses a glyph from the Segoe MDL2 Assets font as its content.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.SymbolIcon.#ctor">
            <summary>
            Initializes a new instance of the SymbolIcon class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.SymbolIcon.#ctor(iNKORE.UI.WPF.Modern.Controls.Symbol)">
            <summary>
            Initializes a new instance of the SymbolIcon class using the specified symbol.
            </summary>
            <param name="symbol">
            A named constant of the enumeration that specifies the Segoe MDL2 Assets glyph
            to use. The default is **null**.
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.SymbolIcon.SymbolProperty">
            <summary>
            Identifies the Symbol dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SymbolIcon.Symbol">
            <summary>
            Gets or sets the Segoe MDL2 Assets glyph used as the icon content.
            </summary>
            <value>A named constant of the numeration that specifies the Segoe MDL2 Assets glyph to use.</value>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TextContextMenu">
            <summary>
            Represents a specialized context menu that contains commands for editing text.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TextContextMenu.#ctor">
            <summary>
            Initializes a new instance of the TextContextMenu class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.XamlControlsResources">
            <summary>
            Default styles for controls.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.XamlControlsResources.#ctor">
            <summary>
            Initializes a new instance of the XamlControlsResources class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.IsSupported">
            <summary>
            Checks if the current <see cref="N:Windows"/> supports Aero.
            </summary>
            <returns><see langword="true"/> if Aero is supported.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.IsAcrylicSupported">
            <summary>
            Checks if the current <see cref="N:Windows"/> supports selected Acrylic.
            </summary>
            <returns><see langword="true"/> if Acrylic is supported.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.Apply(System.Windows.Window,System.Boolean)">
            <summary>
            Applies selected background effect to <see cref="T:System.Windows.Window"/> when is rendered.
            </summary>
            <param name="window">Window to apply effect.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.Apply(System.IntPtr,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Applies selected background effect to <c>hWnd</c> by it's pointer.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
            <param name="color">The Gradient Color of Acrylic.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.Remove(System.Windows.Window)">
            <summary>
            Tries to remove background effects if they have been applied to the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window from which the effect should be removed.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.Remove(System.IntPtr)">
            <summary>
            Tries to remove all effects if they have been applied to the <c>hWnd</c>.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.ACCENT_STATE">
            <summary>
            DWM window accent state.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.WINCOMPATTR">
            <summary>
            DWM window attributes.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.ACCENT_POLICY">
            <summary>
            DWM window accent policy.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.SetWindowCompositionAttribute(System.IntPtr,iNKORE.UI.WPF.Modern.Helpers.Styles.AcrylicHelper.WINCOMPATTRDATA@)">
            <summary>
            Sets various information regarding DWM window attributes.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Helpers.Styles.WindowCornerStyle.Default">
            <summary>
            Let the system decide whether or not to round window corners.
            Equivalent to DWMWCP_DEFAULT
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Helpers.Styles.WindowCornerStyle.DoNotRound">
            <summary>
            Never round window corners.
            Equivalent to DWMWCP_DONOTROUND
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Helpers.Styles.WindowCornerStyle.Round">
            <summary>
            Round the corners if appropriate.
            Equivalent to DWMWCP_ROUND
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Helpers.Styles.WindowCornerStyle.RoundSmall">
            <summary>
            Round the corners if appropriate, with a small radius.
            Equivalent to DWMWCP_ROUNDSMALL
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.IsSupported(iNKORE.UI.WPF.Modern.Helpers.Styles.BackdropType)">
            <summary>
            Checks if the current <see cref="N:Windows"/> supports selected <see cref="T:iNKORE.UI.WPF.Modern.Helpers.Styles.BackdropType"/>.
            </summary>
            <param name="type">Background type to check.</param>
            <returns><see langword="true"/> if <see cref="T:iNKORE.UI.WPF.Modern.Helpers.Styles.BackdropType"/> is supported.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.Apply(System.Windows.Window,iNKORE.UI.WPF.Modern.Helpers.Styles.BackdropType,System.Boolean)">
            <summary>
            Applies selected background effect to <see cref="T:System.Windows.Window"/> when is rendered.
            </summary>
            <param name="window">Window to apply effect.</param>
            <param name="type">Background type.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.Apply(System.IntPtr,iNKORE.UI.WPF.Modern.Helpers.Styles.BackdropType,System.Boolean)">
            <summary>
            Applies selected background effect to <c>hWnd</c> by it's pointer.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
            <param name="type">Background type.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.Remove(System.Windows.Window)">
            <summary>
            Tries to remove background effects if they have been applied to the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window from which the effect should be removed.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.Remove(System.IntPtr)">
            <summary>
            Tries to remove all effects if they have been applied to the <c>hWnd</c>.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.ApplyDarkMode(System.Windows.Window)">
            <summary>
            Tries to inform the operating system that this window uses dark mode.
            </summary>
            <param name="window">Window to apply effect.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.ApplyDarkMode(System.IntPtr)">
            <summary>
            Tries to inform the operating system that this <c>hWnd</c> uses dark mode.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.RemoveDarkMode(System.Windows.Window)">
            <summary>
            Tries to clear the dark theme usage information.
            </summary>
            <param name="window">Window to remove effect.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.RemoveDarkMode(System.IntPtr)">
            <summary>
            Tries to clear the dark theme usage information.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.RemoveTitleBar(System.Windows.Window)">
            <summary>
            Tries to remove default TitleBar from <c>hWnd</c>.
            </summary>
            <param name="window">Window to remove effect.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.MicaHelper.RemoveTitleBar(System.IntPtr)">
            <summary>
            Tries to remove default TitleBar from <c>hWnd</c>.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
            <returns><see langowrd="false"/> is problem occurs.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Helpers.Styles.SnapLayout">
            <summary>
            Brings the Snap Layout functionality from Windows 11 to a custom <see cref="T:iNKORE.UI.WPF.Modern.Controls.Primitives.TitleBar"/>.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Helpers.Styles.SnapLayout.HwndSourceHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Represents the method that handles Win32 window messages.
            </summary>
            <param name="hWnd">The window handle.</param>
            <param name="uMsg">The message ID.</param>
            <param name="wParam">The message's wParam value.</param>
            <param name="lParam">The message's lParam value.</param>
            <param name="handled">A value that indicates whether the message was handled. Set the value to <see langword="true"/> if the message was handled; otherwise, <see langword="false"/>.</param>
            <returns>The appropriate return value depends on the particular message. See the message documentation details for the Win32 message being handled.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.CubicBezierEase.GetSplineProgress(System.Double)">
            <summary>
            Calculates spline progress from a linear progress.
            </summary>
            <param name="linearProgress">the linear progress</param>
            <returns>the spline progress</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.CubicBezierEase.Build">
            <summary>
            Compute cached coefficients.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.CubicBezierEase.GetBezierValue(System.Double,System.Double,System.Double)">
            <summary>
            Get an X or Y value with the Bezier formula.
            </summary>
            <param name="b">the second Bezier coefficient</param>
            <param name="c">the third Bezier coefficient</param>
            <param name="t">the parameter value to evaluate at</param>
            <returns>the value of the Bezier function at the given parameter</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.CubicBezierEase.GetXAndDx(System.Double,System.Double@,System.Double@)">
            <summary>
            Get X and dX/dt at a given parameter
            </summary>
            <param name="t">the parameter value to evaluate at</param>
            <param name="x">the value of x there</param>
            <param name="dx">the value of dx/dt there</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.CubicBezierEase.SetParameterFromX(System.Double)">
            <summary>
            Compute the parameter value that corresponds to a given X value, using a modified
            clamped Newton-Raphson algorithm to solve the equation X(t) - time = 0. We make 
            use of some known properties of this particular function:
            * We are only interested in solutions in the interval [0,1]
            * X(t) is increasing, so we can assume that if X(t) > time t > solution.  We use
              that to clamp down the search interval with every probe.
            * The derivative of X and Y are between 0 and 3.
            </summary>
            <param name="time">the time, scaled to fit in [0,1]</param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.DrillInNavigationTransitionInfo">
            <summary>
            Specifies the animation to run when a user navigates forward in a logical hierarchy,
            like from a master list to a detail page.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.DrillInNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the DrillInNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.EntranceNavigationTransitionInfo">
            <summary>
            Specifies the animation to run when content appears on a Page.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.EntranceNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the EntranceNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.FadeInThemeAnimation">
            <summary>
            Represents the preconfigured opacity animation that applies to controls when
            they are first shown.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.FadeInThemeAnimation.#ctor">
            <summary>
            Initializes a new instance of the FadeInThemeAnimation class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.FadeInThemeAnimation.TargetNameProperty">
            <summary>
            Identifies the TargetName dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Media.Animation.FadeInThemeAnimation.TargetName">
            <summary>
            Gets or sets the reference name of the control element being targeted.
            </summary>
            <returns>
            The reference name. This is typically the **x:Name** of the relevant element
            as declared in XAML.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.FadeOutThemeAnimation">
            <summary>
            Represents the preconfigured opacity animation that applies to controls when
            they are removed from the UI or hidden.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.FadeOutThemeAnimation.#ctor">
            <summary>
            Initializes a new instance of the FadeOutThemeAnimation class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.FadeOutThemeAnimation.TargetNameProperty">
            <summary>
            Identifies the TargetName dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Media.Animation.FadeOutThemeAnimation.TargetName">
            <summary>
            Gets or sets the reference name of the control element being targeted.
            </summary>
            <returns>
            The reference name. This is typically the **x:Name** of the relevant element
            as declared in XAML.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.NavigationThemeTransition">
            <summary>
            Provides page navigation animations.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.NavigationThemeTransition.#ctor">
            <summary>
            Initializes a new instance of the NavigationThemeTransition class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfoProperty">
            <summary>
            Identifies the DefaultNavigationTransitionInfo dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfo">
            <summary>
            Gets or sets the default transition used when navigating between pages.
            </summary>
            <returns>
            The default transition used when navigating between pages.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo">
            <summary>
            Provides parameter info for the Frame.Navigate method. Controls how the transition
            animation runs during the navigation action.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.NavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the NavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionEffect">
            <summary>
            Defines constants that describe the type of animation to play during a slide
            transition.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionEffect.FromBottom">
            <summary>
            The exiting page fades out and the entering page enters from the bottom.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionEffect.FromLeft">
            <summary>
            The exiting page leaves to the right of the panel and the entering page enters
            from the left.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionEffect.FromRight">
            <summary>
            The exiting page leaves to the left of the panel and the entering page enters
            from the right.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionInfo">
            <summary>
            Provides the parameters for a slide navigation transition.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the **SlideNavigationTransitionInfo** class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionInfo.EffectProperty">
            <summary>
            Identifies the Effect dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Media.Animation.SlideNavigationTransitionInfo.Effect">
            <summary>
            Gets or sets the type of animation effect to play during the slide transition.
            </summary>
            <returns>
            The type of animation effect to play during the slide transition.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.SuppressNavigationTransitionInfo">
            <summary>
            Specifies that animations are suppressed during navigation.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.SuppressNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the SuppressNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.Transition">
            <summary>
            Represents a visual behavior that occurs for predefined actions or state changes.
            Specific theme transitions (various Transition derived classes) can be applied
            to individual elements using the UIElement.Transitions property, or applied for
            scenario-specific theme transition properties such as ContentControl.ContentTransitions.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Media.Animation.TransitionCollection">
            <summary>
            Represents a collection of Transition objects. Each Transition object represents
            a different theme transition, part of the Windows Runtime animation library.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Media.Animation.TransitionCollection.#ctor">
            <summary>
            Initializes a new instance of the TransitionCollection class.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.DWMAPI">
            <summary>
            Used by Desktop Window Manager (DWM)
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE">
            <summary>
            DWMWINDOWATTRIBUTE enumeration. (dwmapi.h)
            <para><see href="https://github.com/electron/electron/issues/29937"/></para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Enables or forcibly disables DWM transitions. The pvAttribute parameter points to a value of type BOOL. TRUE to disable transitions, or FALSE to enable transitions.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_ALLOW_NCPAINT">
            <summary>
            Enables content rendered in the non-client area to be visible on the frame drawn by DWM.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Retrieves the bounds of the caption button area in the window-relative space.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Forces the window to display an iconic thumbnail or peek representation (a static bitmap), even if a live or snapshot representation of the window is available.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_CLOAK">
            <summary>
            Cloaks the window such that it is not visible to the user.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_CLOAKED">
            <summary>
            If the window is cloaked, provides one of the following values explaining why.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Freeze the window's thumbnail image with its current visuals. Do no further live updates on the thumbnail image to match the window's contents.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_USE_IMMERSIVE_DARK_MODE_OLD">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_USE_IMMERSIVE_DARK_MODE">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_WINDOW_CORNER_PREFERENCE">
            <summary>
            Controls the policy that rounds top-level window corners.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_BORDER_COLOR">
            <summary>
            The color of the thin border around a top-level window.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_COLOR">
            <summary>
            The color of the caption.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_TEXT_COLOR">
            <summary>
            The color of the caption text.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_VISIBLE_FRAME_BORDER_THICKNESS">
            <summary>
            Width of the visible border around a thick frame window.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_SYSTEMBACKDROP_TYPE">
            <summary>
            Allows to enter a value from 0 to 4 deciding on the imposed backdrop effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE.DWMWA_MICA_EFFECT">
            <summary>
            Indicates whether the window should use the Mica effect.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT">
            <summary>
            Collection of backdrop types.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT.DWMSBT_AUTO">
            <summary>
            Automatically selects backdrop effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT.DWMSBT_DISABLE">
            <summary>
            Turns off the backdrop effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT.DWMSBT_MAINWINDOW">
            <summary>
            Sets Mica effect with generated wallpaper tint.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT.DWMSBT_TRANSIENTWINDOW">
            <summary>
            Sets acrlic effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMSBT.DWMSBT_TABBEDWINDOW">
            <summary>
            Sets blurred wallpaper effect, like Mica without tint.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.DWMAPI.PvAttribute">
            <summary>
            Abstraction of pointer to an object containing the attribute value to set. The type of the value set depends on the value of the dwAttribute parameter.
            The DWMWINDOWATTRIBUTE enumeration topic indicates, in the row for each flag, what type of value you should pass a pointer to in the pvAttribute parameter.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.PvAttribute.Disable">
            <summary>
            Object containing the <see langowrd="false"/> attribute value to set in dwmapi.h. 
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.PvAttribute.Enable">
            <summary>
            Object containing the <see langowrd="true"/> attribute value to set in dwmapi.h. 
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS">
            <summary>
            Represents the current DWM color accent settings.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.clrColor">
            <summary>
            ColorizationColor
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.clrAfterGlow">
            <summary>
            ColorizationAfterglow.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.nIntensity">
            <summary>
            ColorizationColorBalance.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.clrAfterGlowBalance">
            <summary>
            ColorizationAfterglowBalance.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.clrBlurBalance">
            <summary>
            ColorizationBlurBalance.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.clrGlassReflectionIntensity">
            <summary>
            ColorizationGlassReflectionIntensity.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS.fOpaque">
            <summary>
            ColorizationOpaqueBlend.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.DWMAPI.DwmSetWindowAttribute(System.IntPtr,iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMWINDOWATTRIBUTE,System.Int32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.DWMAPI.DwmGetColorizationParameters(iNKORE.UI.WPF.Modern.Native.DWMAPI.DWMCOLORIZATIONPARAMS@)">
            <summary>
            The feature is not included in the Microsoft documentation. Reads Desktop Window Manager (DWM) color information.
            </summary>
            <param name="dwParameters">A pointer to a reference value that will hold the color information.</param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.HT">
            <summary>
            The return value of the DefWindowProc function is one of the following values, indicating the position of the cursor hot spot.
            <para><see href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-nchittest"/></para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.NOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.CLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.CAPTION">
            <summary>
            In a title bar.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.SYSMENU">
            <summary>
            In a window menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.GROWBOX">
            <summary>
            In a size box (same as HTSIZE).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.MENU">
            <summary>
            In a menu.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.HSCROLL">
            <summary>
            In a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.VSCROLL">
            <summary>
            In the vertical scroll bar.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.MINBUTTON">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.MAXBUTTON">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.LEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.RIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.HT.TOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.WINDOWPOS">
            <summary>Contains information about the size and position of a window.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.hwnd">
            <summary>
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.hwndInsertAfter">
            <summary>
            <para>Type: <b>HWND</b> The position of the window in Z order (front-to-back position). This member can be a handle to the window behind which this window is placed, or can be one of the special values listed with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowpos">SetWindowPos</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.x">
            <summary>
            <para>Type: <b>int</b> The position of the left edge of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.y">
            <summary>
            <para>Type: <b>int</b> The position of the top edge of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.cx">
            <summary>
            <para>Type: <b>int</b> The window width, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.cy">
            <summary>
            <para>Type: <b>int</b> The window height, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowpos#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPOS.flags">
            <summary>Type: <b>UINT</b></summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT">
            <summary>Contains information about the placement of a window on the screen.</summary>
            <remarks>
            <para>If the window is a top-level window that does not have the <b>WS_EX_TOOLWINDOW</b> window style, then the coordinates represented by the following members are in workspace coordinates: <b>ptMinPosition</b>, <b>ptMaxPosition</b>, and <b>rcNormalPosition</b>. Otherwise, these members are in screen coordinates. Workspace coordinates differ from screen coordinates in that they take the locations and sizes of application toolbars (including the taskbar) into account. Workspace coordinate (0,0) is the upper-left corner of the workspace area, the area of the screen not being used by application toolbars. The coordinates used in a <b>WINDOWPLACEMENT</b> structure should be used only by the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowplacement">GetWindowPlacement</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowplacement">SetWindowPlacement</a> functions. Passing workspace coordinates to functions which expect screen coordinates (such as <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowpos">SetWindowPos</a>) will result in the window appearing in the wrong location. For example, if the taskbar is at the top of the screen, saving window coordinates using <b>GetWindowPlacement</b> and restoring them using <b>SetWindowPos</b> causes the window to appear to "creep" up the screen.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.length">
            <summary>
            <para>Type: <b>UINT</b> The length of the structure, in bytes. Before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowplacement">GetWindowPlacement</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowplacement">SetWindowPlacement</a> functions, set this member to <c>sizeof(WINDOWPLACEMENT)</c>.</para>
            <para><a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowplacement">GetWindowPlacement</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowplacement">SetWindowPlacement</a> fail if this member is not set correctly.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.flags">
            <summary>Type: <b>UINT</b></summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.showCmd">
            <summary>
            <para>Type: <b>UINT</b> The current show state of the window. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.ptMinPosition">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> The coordinates of the window's upper-left corner when the window is minimized.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.ptMaxPosition">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> The coordinates of the window's upper-left corner when the window is maximized.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.WINDOWPLACEMENT.rcNormalPosition">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> The window's coordinates when the window is in the restored position.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowplacement#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.MONITORINFO">
            <summary>The MONITORINFO structure contains information about a display monitor.The GetMonitorInfo function stores information in a MONITORINFO structure or a MONITORINFOEX structure.The MONITORINFO structure is a subset of the MONITORINFOEX structure.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-monitorinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.MONITORINFO.cbSize">
            <summary>
            <para>The size of the structure, in bytes. Set this member to <c>sizeof ( MONITORINFO )</c> before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmonitorinfoa">GetMonitorInfo</a> function. Doing so lets the function determine the type of structure you are passing to it.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.MONITORINFO.rcMonitor">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.MONITORINFO.rcWork">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.MONITORINFO.dwFlags">
            <summary>
            <para>A set of flags that represent attributes of the display monitor. The following flag is defined. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Native.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:iNKORE.UI.WPF.Modern.Native.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32">
            <summary>
            This header is used by multiple technologies.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.ACCENT_STATE">
            <summary>
            DWM window accent state.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.WINCOMPATTR">
            <summary>
            DWM window attributes.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.WS">
            <summary>
            The following are the window styles. After the window has been created, these styles cannot be modified, except as noted.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.WS.MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.WS.MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.WS.SIZEBOX">
            <summary>
            The window is an overlapped window. Same as the WS_TILEDWINDOW style.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.WS.SYSMENU">
            <summary>
            The window has a window menu on its title bar. The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.WM">
            <summary>
            Window message values, WM_*
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.GWL.STYLE">
            <summary>
            Retrieves the window styles
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.ACCENT_POLICY">
            <summary>
            DWM window accent policy.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Native.User32.POINT">
            <summary>
            The POINT structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.POINT.X">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Native.User32.POINT.Y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.GetSystemMetrics(System.Int32)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            Note that all dimensions retrieved by GetSystemMetrics are in pixels.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window.
            The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Changes an attribute of the specified window.
            The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows.
            The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.PostMessage(System.Runtime.InteropServices.HandleRef,iNKORE.UI.WPF.Modern.Native.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.DestroyIcon(iNKORE.UI.WPF.Modern.Native.HICON)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <param name="hIcon">
            <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Native.User32.GetActiveWindow">
            <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
            <returns>
            <para>Type: <b>HWND</b> The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getactivewindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ResourceDictionaryEx.ThemeDictionaries">
            <summary>
            Gets a collection of merged resource dictionaries that are specifically keyed
            and composed to address theme scenarios, for example supplying theme values for
            "HighContrast".
            </summary>
            <returns>
            A dictionary of ResourceDictionary theme dictionaries. Each must be keyed with
            **x:Key**.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Strings">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.AppBarMoreButtonClosedToolTip">
            <summary>
              查找类似 See more 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.AppBarMoreButtonName">
            <summary>
              查找类似 More app bar 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.AppBarMoreButtonOpenToolTip">
            <summary>
              查找类似 See less 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.IgnoreMenuItemLabel">
            <summary>
              查找类似 Ignore 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.ProofingMenuItemLabel">
            <summary>
              查找类似 Proofing 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionBold">
            <summary>
              查找类似 Bold the selected text 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionCopy">
            <summary>
              查找类似 Copy the selected content to the clipboard 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionCut">
            <summary>
              查找类似 Remove the selected content and put it on the clipboard 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionItalic">
            <summary>
              查找类似 Italicize the selected text 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionPaste">
            <summary>
              查找类似 Insert the contents of the clipboard at the current location 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionRedo">
            <summary>
              查找类似 Repeat the most recently undone action 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionSelectAll">
            <summary>
              查找类似 Select all content 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionUnderline">
            <summary>
              查找类似 Underline the selected text 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandDescriptionUndo">
            <summary>
              查找类似 Reverse the most recent action 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyBold">
            <summary>
              查找类似 B 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyCopy">
            <summary>
              查找类似 C 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyCut">
            <summary>
              查找类似 X 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyItalic">
            <summary>
              查找类似 I 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyPaste">
            <summary>
              查找类似 V 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyRedo">
            <summary>
              查找类似 Y 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeySelectAll">
            <summary>
              查找类似 A 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyUnderline">
            <summary>
              查找类似 U 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandKeyboardAcceleratorKeyUndo">
            <summary>
              查找类似 Z 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelBold">
            <summary>
              查找类似 Bold 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelCopy">
            <summary>
              查找类似 Copy 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelCut">
            <summary>
              查找类似 Cut 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelItalic">
            <summary>
              查找类似 Italic 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelPaste">
            <summary>
              查找类似 Paste 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelRedo">
            <summary>
              查找类似 Redo 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelSelectAll">
            <summary>
              查找类似 Select All 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelUnderline">
            <summary>
              查找类似 Underline 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.TextCommandLabelUndo">
            <summary>
              查找类似 Undo 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.ToggleSwitchOff">
            <summary>
              查找类似 Off 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Strings.ToggleSwitchOn">
            <summary>
              查找类似 On 的本地化字符串。
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ThemeManager.ApplicationThemeProperty">
            <summary>
            Identifies the ApplicationTheme dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ThemeManager.ApplicationTheme">
            <summary>
            Gets or sets a value that determines the light-dark preference for the overall
            theme of an app.
            </summary>
            <returns>
            A value of the enumeration. The initial value is the default theme set by the
            user in Windows settings.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.ThemeManager.GetRequestedTheme(System.Windows.FrameworkElement)">
            <summary>
            Gets the UI theme that is used by the UIElement (and its child elements)
            for resource determination. The UI theme you specify with RequestedTheme can
            override the app-level RequestedTheme.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>A value of the enumeration, for example **Light**.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.ThemeManager.SetRequestedTheme(System.Windows.FrameworkElement,iNKORE.UI.WPF.Modern.ElementTheme)">
            <summary>
            Sets the UI theme that is used by the UIElement (and its child elements)
            for resource determination. The UI theme you specify with RequestedTheme can
            override the app-level RequestedTheme.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ThemeManager.RequestedThemeProperty">
            <summary>
            Identifies the RequestedTheme dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.ThemeManager.GetActualTheme(System.Windows.FrameworkElement)">
            <summary>
            Gets the UI theme that is currently used by the element, which might be different
            than the RequestedTheme.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>A value of the enumeration, for example **Light**.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ThemeManager.ActualThemeProperty">
            <summary>
            Identifies the ActualTheme dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.ApplicationTheme">
            <summary>
            Declares the theme preference for an app.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ApplicationTheme.Light">
            <summary>
            Use the **Light** default theme.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ApplicationTheme.Dark">
            <summary>
            Use the **Dark** default theme.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.ElementTheme">
            <summary>
            Specifies a UI theme that should be used for individual UIElement parts of an app UI.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ElementTheme.Default">
            <summary>
            Use the Application.RequestedTheme value for the element. This is the default.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ElementTheme.Light">
            <summary>
            Use the **Light** default theme.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.ElementTheme.Dark">
            <summary>
            Use the **Dark** default theme.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ThemeResources.RequestedTheme">
            <summary>
            Gets or sets a value that determines the light-dark preference for the overall
            theme of an app.
            </summary>
            <returns>
            A value of the enumeration. The initial value is the default theme set by the
            user in Windows settings.
            </returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.ThemeResources.AccentColor">
            <summary>
            Gets or sets the accent color of the app.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
