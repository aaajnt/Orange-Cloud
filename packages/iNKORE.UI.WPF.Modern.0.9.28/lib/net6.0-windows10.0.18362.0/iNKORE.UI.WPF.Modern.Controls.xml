<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iNKORE.UI.WPF.Modern.Controls</name>
    </assembly>
    <members>
        <member name="T:iNKORE.UI.WPF.Modern.Common.EmptyEnumeratorA">
            <summary>
            Returns an Enumerator that enumerates over nothing.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.EmptyEnumeratorA.Instance">
            <summary>
            Read-Only instance of an Empty Enumerator.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.EmptyEnumeratorA.Reset">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.EmptyEnumeratorA.MoveNext">
            <summary>
            Returns false.
            </summary>
            <returns>false</returns>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Common.EmptyEnumeratorA.Current">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Common.Extensions.ExecuteWhenLoaded(System.Windows.FrameworkElement,System.Action)">
            <summary> 
            Executes the specified action if the element is loaded or at the loaded event if it's not loaded.
            </summary>
            <param name="element">The element where the action should be run.</param>
            <param name="invokeAction">An action that takes no parameters.</param>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel">
            <summary>
            Represents a panel that arranges its items horizontally if there is available space, otherwise vertically.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.HorizontalOrientationMarginProperty">
            <summary>
            Gets the identifier for the HorizontalOrientationMargin dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.GetHorizontalOrientationMargin(System.Windows.DependencyObject)">
            <summary>
            Gets the HorizontalOrientationMargin from an object.
            </summary>
            <param name="control">The object that has an HorizontalOrientationMargin.</param>
            <returns>The object's HorizontalOrientationMargin.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets the HorizontalOrientationMargin to an object.
            </summary>
            <param name="control">The object that the HorizontalOrientationMargin value will be set to.</param>
            <param name="value">The value of the HorizontalOrientationMargin.</param>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding">
            <summary>
            Gets and sets the distance between the edges of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel"/> and its children when the panel is oriented horizontally.
            </summary>
            <value>The distance between the edges of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel"/> and its children when the panel is oriented horizontally.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.HorizontalOrientationPaddingProperty">
            <summary>
            Gets the identifier for the <see cref="P:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.VerticalOrientationMarginProperty">
            <summary>
            Gets the identifier for the VerticalOrientationMargin dependency property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.GetVerticalOrientationMargin(System.Windows.DependencyObject)">
            <summary>
            Gets the VerticalOrientationMargin from an object.
            </summary>
            <param name="control">The object that has an VerticalOrientationMargin.</param>
            <returns>The object's VerticalOrientationMargin.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets the VerticalOrientationMargin to an object.
            </summary>
            <param name="control">The object that the VerticalOrientationMargin value will be set to.</param>
            <param name="value">The value of the VerticalOrientationMargin.</param>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding">
            <summary>
            Gets and sets the distance between the edges of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel"/> and its children when the panel is oriented vertically.
            </summary>
            <value>The distance between the edges of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel"/> and its children when the panel is oriented vertically.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.VerticalOrientationPaddingProperty">
            <summary>
            Gets the identifier for the <see cref="P:iNKORE.UI.WPF.Modern.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/> dependency property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.Primitives.ProgressBarTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as **TemplatedParent** sources
            when defining templates for a ProgressBar control. Not intended for general use.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TransitionType">
            <summary>
            enumeration for the different transition types
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Default">
            <summary>
            Use the VisualState DefaultTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Normal">
            <summary>
            Use the VisualState Normal
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Up">
            <summary>
            Use the VisualState UpTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Down">
            <summary>
            Use the VisualState DownTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Right">
            <summary>
            Use the VisualState RightTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.RightReplace">
            <summary>
            Use the VisualState RightReplaceTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Left">
            <summary>
            Use the VisualState LeftTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.LeftReplace">
            <summary>
            Use the VisualState LeftReplaceTransition
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TransitionType.Custom">
            <summary>
            Use a custom VisualState, the name must be set using CustomVisualStatesName property
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement">
            <summary>
            For specifying where the navigation index is placed relative to the <see cref="T:iNKORE.UI.WPF.Modern.Controls.FlipViewItem"/>.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.Left">
            <summary>
            Index on left side
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.Right">
            <summary>
            Index on right side
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.Top">
            <summary>
            Index on top side
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.Bottom">
            <summary>
            Index on bottom side
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.LeftOverItem">
            <summary>
            Index on left side over the item
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.RightOverItem">
            <summary>
            Index on right side over the item
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.TopOverItem">
            <summary>
            Index on top side over the item
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationIndexPlacement.BottomOverItem">
            <summary>
            Index on bottom side over the item
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.FlipView">
            <summary>
            A control that imitate a slide show with back/forward buttons.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderBrushProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderBrush"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderBrush">
            <summary>
            Gets or sets the border brush of the mouse hover effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderEnabledProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderEnabled"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderEnabled">
            <summary>
            Gets or sets a value indicating whether the border for mouse over effect is enabled or not.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderThicknessProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderThickness"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.MouseHoverBorderThickness">
            <summary>
            Gets or sets the border thickness for the border of the mouse hover effect.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ShowIndexProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ShowIndex"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ShowIndex">
            <summary>
            Gets or sets a value indicating whether the navigation index should be visible.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexItemContainerStyleProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexItemContainerStyle"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexItemContainerStyle">
            <summary>
            Gets or sets a style for the navigation index items.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexPlacementProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexPlacement"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexPlacement">
            <summary>
            Gets or sets a value specifying where the navigation index should be rendered.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied to the navigation index.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IndexVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment characteristics applied to the navigation index.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.CircularNavigationProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.CircularNavigation"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.CircularNavigation">
            <summary>
            Gets or sets a value indicating whether the navigation is circular, so you get the first after last and the last before first.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonsPositionProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonsPosition"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonsPosition">
            <summary>
            Gets or sets the position of the navigation buttons.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.OrientationProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.Orientation">
            <summary>
            Gets or sets the orientation of the navigation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.LeftTransitionProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.LeftTransition"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.LeftTransition">
            <summary>
            Gets or sets the transition of the left navigation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.RightTransitionProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.RightTransition"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.RightTransition">
            <summary>
            Gets or sets the transition of the right navigation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.UpTransitionProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.UpTransition"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.UpTransition">
            <summary>
            Gets or sets the transition of the up navigation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.DownTransitionProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.DownTransition"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.DownTransition">
            <summary>
            Gets or sets the transition of the down navigation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.IsBannerEnabledProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IsBannerEnabled"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IsBannerEnabled">
            <summary>
            Gets or sets whether the banner is visible or not.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.IsNavigationEnabledProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IsNavigationEnabled"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.IsNavigationEnabled">
            <summary>
            Gets or sets whether the navigation button are visible or not.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerText"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerText">
            <summary>
            Gets or sets the banner text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerBackgroundProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerBackground"/> dependency property.</summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplateProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplate"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the banner's content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplateSelectorProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplateSelector"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplateSelector">
            <summary>
            Gets or sets a template selector for BannerText property that enables an application writer to provide custom template-selection logic .
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplate"/> is set.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the BannerText property if it is displayed as a string.
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerTextTemplate"/> is set.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerBackground">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> that is used to fill the banner.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerForegroundProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerForeground"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerForeground">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> that describes the foreground color of the banner label.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerOpacityProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerOpacity"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.BannerOpacity">
            <summary>
            Gets or sets the opacity factor applied to the entire banner when it is rendered in the user interface (UI).
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonStyleProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonStyle"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.NavigationButtonStyle">
            <summary>
            Gets or sets the <see cref="P:System.Windows.FrameworkElement.Style"/> for the navigation buttons.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContent"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContent">
            <summary>
            Provides the object content that should be displayed on the Back Button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentTemplateProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentTemplate"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the Back button's content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the ButtonBackContent property if it is displayed as a string.
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonBackContentTemplate"/> is set.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContent"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContent">
            <summary>
            Provides the object content that should be displayed on the Forward Button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentTemplateProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentTemplate"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the Forward button's content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the ButtonForwardContent property if it is displayed as a string.
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonForwardContentTemplate"/> is set.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContent"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContent">
            <summary>
            Provides the object content that should be displayed on the Up Button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentTemplateProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentTemplate"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the Up button's content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the ButtonUpContent property if it is displayed as a string.
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonUpContentTemplate"/> is set.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContent"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContent">
            <summary>
            Provides the object content that should be displayed on the Down Button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentTemplateProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentTemplate"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the Down button's content.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the ButtonDownContent property if it is displayed as a string.
            </summary>
            <remarks> 
            This property is ignored if <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.FlipView.ButtonDownContentTemplate"/> is set.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipView.loaded">
            <summary>
            To counteract the double Loaded event issue.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.CoerceSelectedIndexProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerce SelectedIndexProperty's value.
            </summary>
            <param name="d">The object that the property exists on.</param>
            <param name="value">The new value of the property, prior to any coercion attempt.</param>
            <returns>The coerced value (with appropriate type). </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.GoBack">
            <summary>
            Changes the current slide to the previous item.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.GoForward">
            <summary>
            Changes the current to the next item.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.ShowControlButtons">
            <summary>
            Brings the control buttons (next/previous) into view.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.HideControlButtons">
            <summary>
            Removes the control buttons (next/previous) from view.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.ApplyToNavigationButtons(System.Action{System.Windows.Controls.Button},System.Action{System.Windows.Controls.Button},System.Action{System.Windows.Controls.Button})">
            <summary>
            Applies actions to navigation buttons.
            </summary>
            <param name="prevButtonApply">Action applied to the previous button.</param>
            <param name="nextButtonApply">Action applied to the next button.</param>
            <param name="inactiveButtonsApply">Action applied to the inactive buttons.</param>
            <exception cref="T:System.ArgumentNullException">Any action is null.</exception>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.ComputeTransition(System.Int32,System.Int32)">
            <summary>
            Computes the transition when changing selected index.
            </summary>
            <param name="fromIndex">Previous selected index.</param>
            <param name="toIndex">New selected index.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.DetectControlButtonsStatus(System.Windows.Visibility)">
            <summary>
            Sets the visibility of navigation buttons.
            </summary>
            <param name="activeButtonsVisibility">Visibility of active buttons.</param>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipView.GetNavigationButtons(System.Windows.Controls.Button@,System.Windows.Controls.Button@,System.Collections.Generic.IEnumerable{System.Windows.Controls.Button}@)">
            <summary>
            Gets the navigation buttons.
            </summary>
            <param name="prevButton">Previous button.</param>
            <param name="nextButton">Next button.</param>
            <param name="inactiveButtons">Inactive buttons.</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.BannerTextProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.BannerText"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.BannerText">
            <summary>
            Gets or sets the banner text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.OwnerPropertyKey">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.Owner"/> dependency property.</summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.OwnerProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.Owner"/> dependency property.</summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.FlipViewItem.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.InfoBadge">
            <summary>
            Represents a control for indicating notifications, alerts, new content, or to attract focus to an area within an app.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBadge.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.InfoBadge.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.InfoBarSeverity">
            <summary>
            Defines constants that indicate the criticality of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.InfoBar"/> that is shown.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarSeverity.Informational">
            <summary>
            Communicates that the InfoBar is displaying general information that requires the user's attention. For assistive technologies, they will follow the behavior set in the Processing_All constant.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarSeverity.Success">
            <summary>
            Communicates that the InfoBar is displaying information regarding a long-running and/or background task that has completed successfully. For assistive technologies, they will follow the behavior set in the Processing_All constant.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarSeverity.Warning">
            <summary>
            Communicates that the InfoBar is displaying information regarding a condition that might cause a problem in the future. For assistive technologies, they will follow the behavior set in the NotificationProcessing_ImportantAll constant.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarSeverity.Error">
            <summary>
            Communicates that the InfoBar is displaying information regarding an error or problem that has occurred. For assistive technologies, they will follow the behavior set in the NotificationProcessing_ImportantAll constant.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.InfoBarCloseReason">
            <summary>
            Defines constants that indicate the cause of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.InfoBar"/> closure.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarCloseReason.CloseButton">
            <summary>
            The InfoBar was closed by the user clicking the close button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBarCloseReason.Programmatic">
            <summary>
            The InfoBar was programmatically closed.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.InfoBar">
            <summary>
            An <see cref="T:iNKORE.UI.WPF.Modern.Controls.InfoBar"/> is an inline notification for essential app-wide messages. The <see cref="T:iNKORE.UI.WPF.Modern.Controls.InfoBar"/> will take up space in a layout and will not cover up other content or float on top of it. It supports rich content (including titles, messages, icons, and buttons) and can be configured to be user-dismissable or persistent.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.InfoBar.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.InfoBar.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InputBoxContent.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.FocusVisualMarginProperty">
            <summary>
            Identifies the FocusVisualMargin dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.FocusVisualMargin">
            <summary>
            Gets or sets the outer margin of the focus visual for a FrameworkElement.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.Header">
            <summary>
            Gets or sets the content for the list header.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.HeaderTemplate">
            <summary>
            Gets the DataTemplate used to display the content of the view header.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.FooterProperty">
            <summary>
            Identifies the Footer dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.Footer">
            <summary>
            Gets or sets the content for the list footer.
            </summary>
            <param>The element from which to read the property value.</param>
            <returns>The content of the list footer. The default value is null.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ListViewBase.FooterTemplateProperty">
            <summary>
            Identifies the FooterTemplate dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ListViewBase.FooterTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content of the view footer.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.CurrentTime">
            <summary>
            当前播放进度
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.CurrentTimeString">
            <summary>
            当前播放时间
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaElementEx._lastChangedTime">
            <summary>
            记录最后修改进度的时间，
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.DurationTime">
            <summary>
            当前视频时长
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.DurationTimeString">
            <summary>
            视频时长时间
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.LeftTime">
            <summary>
            当前剩余时间
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaElementEx.LeftTimeString">
            <summary>
            当前剩余时间
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.AutoPlayProperty">
            <summary>
            Identifies the AutoPlay dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.AutoPlay">
            <summary>
            Gets or sets a value that indicates whether media will begin playback automatically when the <see cref="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.Source"/> property is set.
            </summary>
            <value>true if playback is automatic; otherwise, false. The default is false.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.AreTransportControlsEnabledProperty">
            <summary>
            Identifies the AreTransportControlsEnabled dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.AreTransportControlsEnabled">
            <summary>
            Gets or sets a value that determines whether the standard transport controls are enabled.
            </summary>
            <value>trrue if the standard transport controls are enabled; otherwise, false. The default is false.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.MediaPlayerProperty">
            <summary>
            Identifies the MediaPlayer dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.MediaPlayer">
            <summary>
            Gets or sets the MediaPlayer instance used to render media.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.PosterSourceProperty">
            <summary>
            Identifies the PosterSource dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.PosterSource">
            <summary>
            Gets or sets the image source that is used for a placeholder image during <see cref="T:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement"/> loading transition states.
            </summary>
            <value>An image source for a transition ImageBrush that is applied to the MediaPlayerElement content area.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.Source">
            <summary>
            Gets or sets a media source on the <see cref="T:iNKORE.UI.WPF.Modern.Controls.MediaElementEx"/>.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.StretchProperty">
            <summary>
            Identifies the Stretch dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.Stretch">
            <summary>
            Gets or sets a value that describes how an <see cref="T:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement"/> should be stretched to fill the destination rectangle.
            </summary>
            <value>A value of the <see cref="T:System.Windows.Media.Stretch"/> enumeration that specifies how the source visual media is rendered. The default value is <see cref="F:System.Windows.Media.Stretch.Uniform"/>.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.TransportControlsProperty">
            <summary>
            Identifies the TransportControls dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaPlayerElement.TransportControls">
            <summary>
            Gets or sets the transport controls for the media.
            </summary>
            <value>The transport controls for the media.</value>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls">
            <summary>
            Represents the playback controls for a media player element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.Hide">
            <summary>
            Hides the transport controls if they're shown.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.Show">
            <summary>
            Shows the tranport controls if they're hidden.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.TargetProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.Target"/> dependency property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.FocusVisualMarginProperty">
            <summary>
            Identifies the FocusVisualMargin dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.FocusVisualMargin">
            <summary>
            Gets or sets the outer margin of the focus visual for a FrameworkElement.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.MediaTransportControls.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.LocalizedDialogCommands.MB_GetString(System.Int32)">
            <summary>
            Returns strings for standard message box buttons.
            </summary>
            <param name="strId">The id of the string to return. These are identified by the ID* values assigned to the predefined buttons.</param>
            <returns>The string, or NULL if not found</returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.LocalizedDialogCommands.DialogBoxCommand">
            <summary>
            Represents possible dialogbox command id values by the MB_GetString function.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowDialog">
            <summary>
            Opens a Message Box and returns only when the newly opened window is closed.
            </summary>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>Use an overload of the Show method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData,System.Nullable{System.Windows.MessageBoxResult},System.Media.SystemSound)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource,System.Nullable{System.Windows.MessageBoxResult},System.Media.SystemSound)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message and title bar caption; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource)">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Begins an asynchronous operation to displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>Use an overload of the ShowAsync method, which enables you to specify an owner window. Otherwise, the message box is owned by the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Nullable{System.Windows.MessageBoxResult})">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconKeys.FontIconData,System.Nullable{System.Windows.MessageBoxResult},System.Media.SystemSound)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="T:System.String"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.MessageBox.ShowAsync(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,iNKORE.UI.WPF.Modern.Common.IconSource,System.Nullable{System.Windows.MessageBoxResult},System.Media.SystemSound)">
            <summary>
            Begins an asynchronous operation to displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
            <param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
            <param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
            <param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
            <param name="icon">A <see cref="P:iNKORE.UI.WPF.Modern.Controls.MessageBox.IconSource"/> value that specifies the icon to display.</param>
            <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
            <returns>An asynchronous operation showing the message box. When complete, returns a <see cref="T:System.Windows.MessageBoxResult"/>.</returns>
            <remarks>By default, the message box appears in front of the window that is currently active.</remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.NavigationView.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.NavigationView.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.CharacterType">
            <summary>
            Value indicating the general character set for a given character.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.CharacterType.Other">
            <summary>
            Indicates we could not match the character set.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.CharacterType.Standard">
            <summary>
            Member of the Latin character set.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.CharacterType.Symbolic">
            <summary>
            Member of a symbolic character set.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.CharacterType.Glyph">
            <summary>
            Member of a character set which supports glyphs.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator">
            <summary>
            PersonPicture Control. Displays the Profile Picture, or in its absence Initials,
            for a given Contact.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.InitialsFromDisplayName(System.String)">
            <summary>
            Helper function which takes a DisplayName, as generated by
            Windows.ApplicationModel.Contacts, and returns a initials representation.
            </summary>
            <param name="contactDisplayName">The DisplayName of the person</param>
            <returns>
            String containing the initials representation of the given DisplayName.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.GetCharacterType(System.String)">
            <summary>
            Helper function which indicates the type of characters in a given string
            </summary>
            <param name="str">String from which to detect character-set.</param>
            <returns>
            Character set of the string: Latin, Symbolic, Glyph, or other.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.GetCharacterType(System.Char)">
            <summary>
            Helper function which indicates the character-set of a given character.
            </summary>
            <param name="character">Character for which to detect character-set.</param>
            <returns>
            Character set of the string: Latin, Symbolic, Glyph, or other.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.Split(System.String,System.Char,System.Int32)">
            <summary>
            Helper function which takes in a string and returns a vector of pieces, separated by delimiter.
            </summary>
            <param name="source">String on which to perform the split operation.</param>
            <param name="delim">String on which to perform the split operation.</param>
            <param name="maxIterations">Maximum number of times to perform a <code>getline</code> loop.</param>
            <returns>A vector of pieces from the source string, separated by delimiter</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.StripTrailingBrackets(System.String@)">
            <summary>
            Helper function to remove bracket qualifier from the end of a display name if present.
            </summary>
            <param name="source">String on which to perform the operation.</param>
            <returns>A string with the content within brackets removed.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.InitialsGenerator.GetFirstFullCharacter(System.String)">
            <summary>
            Extracts the first full character from a given string, including any diacritics or combining characters.
            </summary>
            <param name="str">String from which to extract the character.</param>
            <returns>A wstring which represents a given character.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.GetInitials">
            <summary>
            Helper to determine the initials that should be shown.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.GetImageSource">
            <summary>
            Helper to determine the image source that should be shown.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateIfReady">
            <summary>
            Updates Control elements, if available, with the latest values.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateBadge">
            <summary>
            Updates the state of the Badging element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateBadgeNumber">
            <summary>
            Updates Badging Number text element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateBadgeGlyph">
            <summary>
            Updates Badging Glyph element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateBadgeImageSource">
            <summary>
            Updates Badging Image element.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.PersonPicture.UpdateAutomationName">
            <summary>
            Sets the UI Automation name for the control based on contact name and badge state.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_initialsTextBlock">
            <summary>
            XAML Element for the first TextBlock matching x:Name of InitialsTextBlock.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_badgeNumberTextBlock">
            <summary>
            XAML Element for the first TextBlock matching x:Name of BadgeNumberTextBlock.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_badgeGlyphIcon">
            <summary>
            XAML Element for the first TextBlock matching x:Name of BadgeGlyphIcon.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_badgeImageBrush">
            <summary>
            XAML Element for the first ImageBrush matching x:Name of BadgeImageBrush.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_badgingEllipse">
            <summary>
            XAML Element for the first Ellipse matching x:Name of BadgingBackgroundEllipse.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_badgingBackgroundEllipse">
            <summary>
            XAML Element for the first Ellipse matching x:Name of BadgingEllipse.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_displayNameInitials">
            <summary>
            The initials from the DisplayName property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_contactDisplayNameInitials">
            <summary>
            The initials from the Contact property.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PersonPicture.m_contactImageSource">
            <summary>
            The ImageSource from the Contact property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.PipsPagerButtonVisibility">
            <summary>
            Defines constants that specify how the navigation buttons of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.PipsPager"/> are displayed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PipsPagerButtonVisibility.Visible">
            <summary>
            The navigation button is visible and enabled, but hidden when content is at one or the other extent. For example, the Previous button is hidden when the current page is the first page, and the Next button is hidden when the current page is the last page.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PipsPagerButtonVisibility.VisibleOnPointerOver">
            <summary>
            The button behavior is the same as Visible except the button is visible only when the pointer cursor is over the pager, or keyboard focus is inside the pager or on a navigation button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.PipsPagerButtonVisibility.Collapsed">
            <summary>
            The button is not visible and does not take up layout space.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.PipsPager">
            <summary>
            Represents a control that enables navigation within linearly paginated content using a configurable collection of glyphs, each of which represents a single "page" within a limitless range.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.ProgressBar">
            <summary>
            Represents a control that indicates the progress of an operation, where the typical
            visual appearance is a bar that animates a filled area as progress continues.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the IsIndeterminate dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value that indicates whether the progress bar reports generic
            progress with a repeating pattern or reports progress based on the Value property.
            </summary>
            <returns>
            **True** if the progress bar reports generic progress with a repeating pattern;
            **false** if the progress bar reports progress based on the Value property. The
            default is **false**.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ProgressBar.ShowErrorProperty">
            <summary>
            Identifies the ShowError dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ProgressBar.ShowError">
            <summary>
            Gets or sets a value that indicates whether the progress bar should use visual
            states that communicate an **Error** state to the user.
            </summary>
            <returns>
            **True** if the progress bar should use visual states that communicate an **Error**
            state to the user; otherwise, **false**. The default is **false**.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ProgressBar.ShowPausedProperty">
            <summary>
            Identifies the ShowPaused dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ProgressBar.ShowPaused">
            <summary>
            Gets or sets a value that indicates whether the progress bar should use visual
            states that communicate a **Paused** state to the user.
            </summary>
            <returns>
            **True** if the progress bar should use visual states that communicate a **Paused**
            state to the user; otherwise, **false**. The default is **false**.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ProgressBar.TemplateSettingsProperty">
            <summary>
            Identifies the TemplateSettings dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ProgressBar.TemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as **TemplateBinding**
            sources when defining templates for a ProgressBar control.
            </summary>
            <returns>An object that provides calculated values for templates.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.ProgressBar.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.ProgressBar.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.RelativePanel">
             <summary>
             Defines an area within which you can position and align child objects in relation
             to each other or the parent panel.
             </summary>
             <remarks>
             <para><b>Default position</b></para>
                <para>By default, any unconstrained element declared as a child of the RelativePanel is given the entire
                available space and positioned at the(0, 0) coordinates(upper left corner) of the panel.So, if you
             are positioning a second element relative to an unconstrained element, keep in mind that the second
             element might get pushed out of the panel.
             </para>
            <para><b>Conflicting relationships</b></para>
                <para>
                If you set multiple relationships that target the same edge of an element, you might have conflicting
             relationships in your layout as a result.When this happens, the relationships are applied in the
                following order of priority:
                  •   Panel alignment relationships (AlignTopWithPanel, AlignLeftWithPanel, …) are applied first.
                  •   Sibling alignment relationships(AlignTopWith, AlignLeftWith, …) are applied second.
                  •   Sibling positional relationships(Above, Below, RightOf, LeftOf) are applied last.
             </para>
             <para>
             The panel-center alignment properties(AlignVerticalCenterWith, AlignHorizontalCenterWithPanel, ...) are
             typically used independently of other constraints and are applied if there is no conflict.
            </para>
             <para>
             The HorizontalAlignment and VerticalAlignment properties on UI elements are applied after relationship
             properties are evaluated and applied. These properties control the placement of the element within the
             available size for the element, if the desired size is smaller than the available size.
             </para>
             </remarks>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAbove(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.Above XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.Above XAML attached property value of the specified object.
            (The element to position this element above.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAbove(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element above.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AboveProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AboveProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignBottomWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignBottomWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignBottomWithPanel XAML attached property value of the specified
               object. (true to align this element's bottom edge with the panel's bottom edge;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignBottomWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's bottom edge with the panel's
            bottom edge; otherwise, false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignBottomWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignBottomWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignBottomWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignBottomWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignBottomWith XAML attached property value of the specified object.
            (The element to align this element's bottom edge with.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignBottomWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's bottom edge with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignBottomWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignBottomWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignHorizontalCenterWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignHorizontalCenterWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignHorizontalCenterWithPanel XAML attached property value
            of the specified object. (true to horizontally center this element in the panel;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignHorizontalCenterWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to horizontally center this element in the panel; otherwise,
            false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignHorizontalCenterWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignHorizontalCenterWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignHorizontalCenterWith XAML attached property value of the
            specified object. (The element to align this element's horizontal center with.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignHorizontalCenterWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's horizontal center with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignHorizontalCenterWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignHorizontalCenterWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignLeftWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignLeftWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignLeftWithPanel XAML attached property value of the specified
            object. (true to align this element's left edge with the panel's left edge; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignLeftWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
             The value to set. (true to align this element's left edge with the panel's left
             edge; otherwise, false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignLeftWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignLeftWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignLeftWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignLeftWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignLeftWith XAML attached property value of the specified
            object. (The element to align this element's left edge with.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignLeftWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's left edge with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignLeftWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignLeftWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignRightWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignRightWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignRightWithPanel XAML attached property value of the specified
            object. (true to align this element's right edge with the panel's right edge;
            otherwise, false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignRightWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's right edge with the panel's right
            edge; otherwise, false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignRightWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignRightWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignRightWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignRightWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignRightWith XAML attached property value of the specified
            object. (The element to align this element's right edge with.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignRightWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignRightWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's right edge with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignRightWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignRightWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignTopWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignTopWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignTopWithPanel XAML attached property value of the specified
            object. (true to align this element's top edge with the panel's top edge; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignTopWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.AlignTopWithPanel XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to align this element's top edge with the panel's top
            edge; otherwise, false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignTopWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignTopWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignTopWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignTopWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The value to set. (The element to align this element's top edge with.)</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignTopWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignTopWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's top edge with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignTopWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignTopWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignVerticalCenterWithPanel(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignVerticalCenterWithPanel XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.AlignVerticalCenterWithPanel XAML attached property value of
            the specified object. (true to vertically center this element in the panel; otherwise,
            false.)
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignVerticalCenterWithPanel(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the RelativePanel.AlignVerticalCenterWithPanel XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">
            The value to set. (true to vertically center this element in the panel; otherwise,
            false.)
            </param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetAlignVerticalCenterWith(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.AlignVerticalCenterWith XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>The value to set. (The element to align this element's vertical center with.)</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetAlignVerticalCenterWith(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.AlignVerticalCenterWith XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to align this element's horizontal center with.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignVerticalCenterWithProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetBelow(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.Below XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.Below XAML attached property value of the specified object.
            (The element to position this element below.)                                
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetBelow(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.Above XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element below.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.BelowProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.BelowProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetLeftOf(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.LeftOf XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.LeftOf XAML attached property value of the specified object.
            (The element to position this element to the left of.)                                 
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetLeftOf(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.LeftOf XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element to the left of.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.LeftOfProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.LeftOfProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.GetRightOf(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RelativePanel.RightOf XAML attached property for the target element.
            </summary>
            <param name="obj">The object from which the property value is read.</param>
            <returns>
            The RelativePanel.RightOf XAML attached property value of the specified object.
            (The element to position this element to the right of.)                                   
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.SetRightOf(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the value of the RelativePanel.RightOf XAML attached property for a target element.
            </summary>
            <param name="obj">The object to which the property value is written.</param>
            <param name="value">The value to set. (The element to position this element to the right of.)</param>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.RightOfProperty">
            <summary>
             Identifies the <see cref="F:iNKORE.UI.WPF.Modern.Controls.RelativePanel.RightOfProperty"/> XAML attached property.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for
            child elements and determines a size for the System.Windows.FrameworkElement-derived
            class.</summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Infinity can
            be specified as a value to indicate that the element will size to whatever content
            is available.
            </param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations
            of child element sizes.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.RelativePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
             When overridden in a derived class, positions child elements and determines a
             size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself
            and its children.
            </param>
            <returns>The actual size used.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.SplitView.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.SplitView.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.AmPmComparer">
            <summary>
            Represents an hour comparison operation that ensures that 12 is smaller than 1.
            This ensures that in the <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase"/> control the first hour that is selectable is 12 (AM/PM). 
            </summary>
            <remarks>
            This ensures that the first hour that is selectable is 12 (AM/PM). <br></br>
            This comparer is used only if in the corresponding <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase"/> the value for <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsMilitaryTime"/> is false.
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.DateTimeComponentSelector.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.DateTimeComponentSelector.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TimePartVisibility">
            <summary>
            Defines the visibility for time-parts that are visible for the <see cref="T:System.Windows.Controls.DatePicker"/>. 
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePicker.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePicker.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePicker.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePicker.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePicker.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePicker.Header">
            <summary>
            Gets or sets the content for the control's header.
            </summary>
            <returns>The content of the control's header. The default is **null**.</returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePicker.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePicker.HeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content of the control's header.
            </summary>
            <returns>
            The template that specifies the visualization of the header object. The default
            is **null**.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Called when the Template's tree has been generated.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePicker.FocusElementAfterIsDropDownOpenChanged">
            <inheritdoc />
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePicker.SetSelectedDateTime">
            <inheritdoc />
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase">
            <summary>
            Represents a base-class for time picking.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IntervalOf5">
            <summary>
            This list contains values from 0 to 55 with an interval of 5. It can be used to bind to <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutes"/> and <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSeconds"/>.
            </summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf5}" /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf5}" /&gt;</code>
            </example>
            <returns>
            Returns a list containing {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55}.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IntervalOf10">
            <summary>
            This list contains values from 0 to 50 with an interval of 10. It can be used to bind to <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutes"/> and <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSeconds"/>.
            </summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf10}" /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf10}" /&gt;</code>
            </example>
            <returns>
            Returns a list containing {0, 10, 20, 30, 40, 50}.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IntervalOf15">
            <summary>
            This list contains values from 0 to 45 with an interval of 15. It can be used to bind to <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutes"/> and <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSeconds"/>.
            </summary>
            <example>
            <code>&lt;MahApps:TimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf15}" /&gt;</code>
            <code>&lt;MahApps:DateTimePicker SourceSeconds="{x:Static MahApps:TimePickerBase.IntervalOf15}" /&gt;</code>
            </example>
            <returns>
            Returns a list containing {0, 15, 30, 45}.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHoursProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHours"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHours">
            <summary>
            Gets or sets a collection used to generate the content for selecting the hours.
            </summary>
            <returns>
            A collection that is used to generate the content for selecting the hours. The default is a list of integer from 0
            to 23 if <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsMilitaryTime" /> is false or a list of integer from
            1 to 12 otherwise.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHoursAmPmComparerProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHoursAmPmComparer"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceHoursAmPmComparer">
            <summary>
            Gets or sets a comparer for the Am/Pm collection used to generate the content for selecting the hours.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutesProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutes"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceMinutes">
            <summary>
            Gets or sets a collection used to generate the content for selecting the minutes.
            </summary>
            <returns>
            A collection that is used to generate the content for selecting the minutes. The default is a list of int from
            0 to 59.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSecondsProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSeconds"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SourceSeconds">
            <summary>
            Gets or sets a collection used to generate the content for selecting the seconds.
            </summary>
            <returns>
            A collection that is used to generate the content for selecting the minutes. The default is a list of int from
            0 to 59.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.OnIsDropDownOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">DatePicker that changed its IsDropDownOpen.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down for a <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase"/> box is currently open.
            </summary>
            <returns>true if the drop-down is open; otherwise, false. The default is false.</returns>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.FocusElementAfterIsDropDownOpenChanged">
            <summary>
            This method is invoked when the <see cref="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDropDownOpenProperty"/> changes.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsClockVisibleProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsClockVisible"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsClockVisible">
            <summary>
            Gets or sets a value indicating whether the clock of this control is visible in the user interface (UI). This is a
            dependency property.
            </summary>
            <remarks>
            If this value is set to false then <see cref="T:System.Windows.Controls.Orientation" /> is set to
            <see cref="F:System.Windows.Controls.Orientation.Vertical" />
            </remarks>
            <returns>
            true if the clock is visible; otherwise, false. The default value is true.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsReadOnlyProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsReadOnly"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the contents of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase" /> are not editable.
            </summary>
            <returns>
            true if the <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePickerBase" /> is read-only; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HandVisibilityProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HandVisibility"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HandVisibility">
            <summary>
            Gets or sets a value indicating the visibility of the clock hands in the user interface (UI).
            </summary>
            <returns>
            The visibility definition of the clock hands. The default is <see cref="F:iNKORE.UI.WPF.Modern.Controls.TimePartVisibility.All" />.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.CultureProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.Culture"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.Culture">
            <summary>
            Gets or sets a value indicating the culture to be used in string formatting operations.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.PickerVisibilityProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.PickerVisibility"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.PickerVisibility">
            <summary>
            Gets or sets a value indicating the visibility of the selectable date-time-parts in the user interface (UI).
            </summary>
            <returns>
            visibility definition of the selectable date-time-parts. The default is <see cref="F:iNKORE.UI.WPF.Modern.Controls.TimePartVisibility.All" />.
            </returns>
        </member>
        <member name="E:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedDateTimeChanged">
            <summary>
            Occurs when the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedDateTime" /> property is changed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedDateTimeProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedDateTime"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedDateTime">
            <summary>
            Gets or sets the currently selected date and time.
            </summary>
            <returns>
            The date and time which is currently selected. The default is null.
            </returns>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedTimeFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedTimeFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SelectedTimeFormat">
            <summary>
            Gets or sets the format that is used to display the selected time.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HoursItemStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HoursItemStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.HoursItemStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the hour items.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.MinutesItemStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.MinutesItemStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.MinutesItemStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the minute items.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SecondsItemStringFormatProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SecondsItemStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.SecondsItemStringFormat">
            <summary>
            Gets or sets a composite string that specifies how to format the second items.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDatePickerVisiblePropertyKey">
            <summary>
            This readonly dependency property is to control whether to show the date-picker (in case of <see cref="T:System.Windows.Controls.DatePicker"/>) or hide it (in case of <see cref="T:iNKORE.UI.WPF.Modern.Controls.TimePicker"/>.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDatePickerVisibleProperty">
            <summary>Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDatePickerVisible"/> dependency property.</summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsDatePickerVisible">
            <summary>
            Gets or sets a value indicating whether the date can be selected or not. This property is read-only.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsMilitaryTime">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" /> that is specified by the
            <see cref="T:System.Globalization.CultureInfo" />
            set by the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.Culture" /> (<see cref="P:System.Windows.FrameworkElement.Language" /> if null) has not a value.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.GetAmPmOffset(System.Int32)">
            <summary>
            Gets the offset from the selected <paramref name="currentHour" /> to use it in <see cref="T:System.TimeSpan" /> as hour
            parameter.
            </summary>
            <param name="currentHour">The current hour.</param>
            <returns>
            An integer representing the offset to add to the hour that is selected in the hour-picker for setting the correct
            <see cref="P:System.DateTime.TimeOfDay" />. The offset is determined as follows:
            <list type="table">
                <listheader>
                    <term>Condition</term><description>Offset</description>
                </listheader>
                <item>
                    <term><see cref="P:iNKORE.UI.WPF.Modern.Controls.TimePickerBase.IsMilitaryTime" /> is false</term><description>0</description>
                </item>
                <item>
                    <term>Selected hour is between 1 AM and 11 AM</term><description>0</description>
                </item>
                <item>
                    <term>Selected hour is 12 AM</term><description>-12h</description>
                </item>
                <item>
                    <term>Selected hour is between 12 PM and 11 PM</term><description>+12h</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl">
            <summary>
            A ContentControl that animates content as it loads and unloads.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.IsTransitioning">
            <summary>
            Gets whether if the content is transitioning.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.Transition">
            <summary>
            Gets or sets the transition type.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.RestartTransitionOnContentChange">
            <summary>
            Gets or sets whether if the transition should restart after the content change.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.CustomVisualStates">
            <summary>
            Gets or sets customized visual states to use as transition.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.CustomVisualStatesName">
            <summary>
            Gets or sets the name of a custom transition visual state.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TransitioningContentControl.ReloadTransition">
            <summary>
            Reload the current transition if the content is the same.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.DisplayRegionHelper.GetWindowRect(System.IntPtr,iNKORE.UI.WPF.Modern.Controls.DisplayRegionHelper.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window.
            The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hwnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewMode">
            <summary>
            Defines constants that specify how panes are shown in a <see cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/>.
            </summary>
            <seealso cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/>
            <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Mode"/>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewMode.SinglePane">
            <summary>
            Only one pane is shown.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewMode.Wide">
            <summary>
            Panes are shown side-by-side.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewMode.Tall">
            <summary>
            Panes are shown top-bottom.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewPriority">
            <summary>
            Defines constants that specify which pane has priority in a TwoPaneView.
            </summary>
            <seealso cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/>
            <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.PanePriority"/>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewPriority.Pane1">
            <summary>
            Pane 1 has priority.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewPriority.Pane2">
            <summary>
            Pane 2 has priority.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewTallModeConfiguration">
            <summary>
            Defines constants that specify how panes are shown in a <see cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/> in tall mode.
            </summary>
            <seealso cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/>
            <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.TallModeConfiguration"/>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewTallModeConfiguration.SinglePane">
            <summary>
            Only the pane that has priority is shown, the other pane is hidden.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewTallModeConfiguration.TopBottom">
            <summary>
            The pane that has priority is shown on top, the other pane is shown on the bottom.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewTallModeConfiguration.BottomTop">
            <summary>
            The pane that has priority is shown on the bottom, the other pane is shown on top.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewWideModeConfiguration">
            <summary>
            Defines constants that specify how panes are shown in a <see cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/> in wide mode.
            </summary>
            <seealso cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/>
            <seealso cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.WideModeConfiguration"/>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewWideModeConfiguration.SinglePane">
            <summary>
            Only the pane that has priority is shown, the other pane is hidden.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewWideModeConfiguration.LeftRight">
            <summary>
            The pane that has priority is shown on the left, the other pane is shown on the right.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneViewWideModeConfiguration.RightLeft">
            <summary>
            The pane that has priority is shown on the right, the other pane is shown on the left.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView">
            <summary>
            Represents a container with two views that size and position content in the available space, either side-by-side or top-bottom.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinWideModeWidth">
            <summary>
            Gets or sets the minimum width at which panes are shown in wide mode.
            </summary>
            <value>The minimum width at which panes are shown in wide mode.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinWideModeWidthProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinWideModeWidth"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinTallModeHeight">
            <summary>
            Gets or sets the minimum height at which panes are shown in tall mode.
            </summary>
            <value>The minimum height at which panes are shown in tall mode.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinTallModeHeightProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.MinTallModeHeight"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1">
            <summary>
            Gets or sets the content of pane 1.
            </summary>
            <value>The content of pane 1.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1Property">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2">
            <summary>
            Gets or sets the content of pane 2.
            </summary>
            <value>The content of pane 2.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2Property">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1Length">
            <summary>
            Gets the calculated width (in wide mode) or height (in tall mode) of pane 1, or sets the GridLength value of pane 1.
            </summary>
            <value>The GridLength that represents the width or height of the pane.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1LengthProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane1Length"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2Length">
            <summary>
            Gets the calculated width (in wide mode) or height (in tall mode) of pane 2, or sets the GridLength value of pane 2.
            </summary>
            <value>The GridLength that represents the width or height of the pane.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2LengthProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Pane2Length"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Mode">
            <summary>
            Gets a value that indicates how panes are shown.
            </summary>
            <value>An enumeration value that indicates how panes are shown.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.ModeProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Mode"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.PanePriority">
            <summary>
            Gets or sets a value that indicates which pane has priority.
            </summary>
            <value>An enumeration value that indicates which pane has priority.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.PanePriorityProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.PanePriority"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.WideModeConfiguration">
            <summary>
            Gets or sets a value that indicates how panes are shown in wide mode.
            </summary>
            <value>An enumeration value that indicates how panes are shown in wide mode.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.WideModeConfigurationProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.WideModeConfiguration"/> dependency property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.TallModeConfiguration">
            <summary>
            Gets or sets a value that indicates how panes are shown in tall mode.
            </summary>
            <value>An enumeration value that indicates how panes are shown in tall mode.</value>
        </member>
        <member name="F:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.TallModeConfigurationProperty">
            <summary>
            Identifies the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.TallModeConfiguration"/> dependency property.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.ModeChanged">
            <summary>
            Occurs when the <see cref="P:iNKORE.UI.WPF.Modern.Controls.TwoPaneView.Mode"/> of the <see cref="T:iNKORE.UI.WPF.Modern.Controls.TwoPaneView"/> has changed.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WPF.Modern.Automation.Peers.ProgressBarAutomationPeer">
            <summary>
            Exposes ProgressBar types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WPF.Modern.Automation.Peers.ProgressBarAutomationPeer.#ctor(iNKORE.UI.WPF.Modern.Controls.ProgressBar)">
            <summary>
            Initializes a new instance of the ProgressBarAutomationPeer class.
            </summary>
            <param name="owner">The ProgressBar to create a peer for.</param>
        </member>
    </members>
</doc>
